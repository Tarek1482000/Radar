
Radar_Eclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  000031a4  00003238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800176  00800176  0000334e  2**0
                  ALLOC
  3 .stab         0000318c  00000000  00000000  00003350  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bd6  00000000  00000000  000064dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000080b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008252  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a84f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bbd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cdac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d262  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_6>
      1c:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <main>
      8a:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <GPIO_setupPinDirection+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <GPIO_setupPinDirection+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	6a 83       	std	Y+2, r22	; 0x02
     e40:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	88 30       	cpi	r24, 0x08	; 8
     e46:	08 f0       	brcs	.+2      	; 0xe4a <GPIO_setupPinDirection+0x1c>
     e48:	d5 c0       	rjmp	.+426    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	84 30       	cpi	r24, 0x04	; 4
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <GPIO_setupPinDirection+0x24>
     e50:	d1 c0       	rjmp	.+418    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3d 83       	std	Y+5, r19	; 0x05
     e5a:	2c 83       	std	Y+4, r18	; 0x04
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	09 f4       	brne	.+2      	; 0xe68 <GPIO_setupPinDirection+0x3a>
     e66:	43 c0       	rjmp	.+134    	; 0xeee <GPIO_setupPinDirection+0xc0>
     e68:	2c 81       	ldd	r18, Y+4	; 0x04
     e6a:	3d 81       	ldd	r19, Y+5	; 0x05
     e6c:	22 30       	cpi	r18, 0x02	; 2
     e6e:	31 05       	cpc	r19, r1
     e70:	2c f4       	brge	.+10     	; 0xe7c <GPIO_setupPinDirection+0x4e>
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	71 f0       	breq	.+28     	; 0xe96 <GPIO_setupPinDirection+0x68>
     e7a:	bc c0       	rjmp	.+376    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <GPIO_setupPinDirection+0x5a>
     e86:	5f c0       	rjmp	.+190    	; 0xf46 <GPIO_setupPinDirection+0x118>
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <GPIO_setupPinDirection+0x66>
     e92:	85 c0       	rjmp	.+266    	; 0xf9e <GPIO_setupPinDirection+0x170>
     e94:	af c0       	rjmp	.+350    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	a1 f4       	brne	.+40     	; 0xec4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e9c:	aa e3       	ldi	r26, 0x3A	; 58
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ea e3       	ldi	r30, 0x3A	; 58
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <GPIO_setupPinDirection+0x8c>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <GPIO_setupPinDirection+0x88>
     ebe:	84 2b       	or	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	98 c0       	rjmp	.+304    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ec4:	aa e3       	ldi	r26, 0x3A	; 58
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ea e3       	ldi	r30, 0x3A	; 58
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <GPIO_setupPinDirection+0xb4>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <GPIO_setupPinDirection+0xb0>
     ee6:	80 95       	com	r24
     ee8:	84 23       	and	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	83 c0       	rjmp	.+262    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	a1 f4       	brne	.+40     	; 0xf1c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ef4:	a7 e3       	ldi	r26, 0x37	; 55
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e7 e3       	ldi	r30, 0x37	; 55
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <GPIO_setupPinDirection+0xe4>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <GPIO_setupPinDirection+0xe0>
     f16:	84 2b       	or	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	6c c0       	rjmp	.+216    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f1c:	a7 e3       	ldi	r26, 0x37	; 55
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e3       	ldi	r30, 0x37	; 55
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <GPIO_setupPinDirection+0x10c>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <GPIO_setupPinDirection+0x108>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	57 c0       	rjmp	.+174    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	a1 f4       	brne	.+40     	; 0xf74 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f4c:	a4 e3       	ldi	r26, 0x34	; 52
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e4 e3       	ldi	r30, 0x34	; 52
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <GPIO_setupPinDirection+0x13c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <GPIO_setupPinDirection+0x138>
     f6e:	84 2b       	or	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	40 c0       	rjmp	.+128    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f74:	a4 e3       	ldi	r26, 0x34	; 52
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e4 e3       	ldi	r30, 0x34	; 52
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <GPIO_setupPinDirection+0x164>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <GPIO_setupPinDirection+0x160>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	2b c0       	rjmp	.+86     	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	a1 f4       	brne	.+40     	; 0xfcc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     fa4:	a1 e3       	ldi	r26, 0x31	; 49
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e1 e3       	ldi	r30, 0x31	; 49
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <GPIO_setupPinDirection+0x194>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <GPIO_setupPinDirection+0x190>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     fcc:	a1 e3       	ldi	r26, 0x31	; 49
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e1 e3       	ldi	r30, 0x31	; 49
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <GPIO_setupPinDirection+0x1bc>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <GPIO_setupPinDirection+0x1b8>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <GPIO_writePin+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <GPIO_writePin+0x8>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	6a 83       	std	Y+2, r22	; 0x02
    1016:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	88 30       	cpi	r24, 0x08	; 8
    101c:	08 f0       	brcs	.+2      	; 0x1020 <GPIO_writePin+0x1c>
    101e:	d5 c0       	rjmp	.+426    	; 0x11ca <GPIO_writePin+0x1c6>
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	08 f0       	brcs	.+2      	; 0x1028 <GPIO_writePin+0x24>
    1026:	d1 c0       	rjmp	.+418    	; 0x11ca <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <GPIO_writePin+0x3a>
    103c:	43 c0       	rjmp	.+134    	; 0x10c4 <GPIO_writePin+0xc0>
    103e:	2c 81       	ldd	r18, Y+4	; 0x04
    1040:	3d 81       	ldd	r19, Y+5	; 0x05
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	2c f4       	brge	.+10     	; 0x1052 <GPIO_writePin+0x4e>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	71 f0       	breq	.+28     	; 0x106c <GPIO_writePin+0x68>
    1050:	bc c0       	rjmp	.+376    	; 0x11ca <GPIO_writePin+0x1c6>
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	3d 81       	ldd	r19, Y+5	; 0x05
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <GPIO_writePin+0x5a>
    105c:	5f c0       	rjmp	.+190    	; 0x111c <GPIO_writePin+0x118>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <GPIO_writePin+0x66>
    1068:	85 c0       	rjmp	.+266    	; 0x1174 <GPIO_writePin+0x170>
    106a:	af c0       	rjmp	.+350    	; 0x11ca <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1072:	ab e3       	ldi	r26, 0x3B	; 59
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e3       	ldi	r30, 0x3B	; 59
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <GPIO_writePin+0x8c>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <GPIO_writePin+0x88>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	98 c0       	rjmp	.+304    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    109a:	ab e3       	ldi	r26, 0x3B	; 59
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	eb e3       	ldi	r30, 0x3B	; 59
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <GPIO_writePin+0xb4>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <GPIO_writePin+0xb0>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	83 c0       	rjmp	.+262    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    10ca:	a8 e3       	ldi	r26, 0x38	; 56
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e8 e3       	ldi	r30, 0x38	; 56
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <GPIO_writePin+0xe4>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <GPIO_writePin+0xe0>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	6c c0       	rjmp	.+216    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10f2:	a8 e3       	ldi	r26, 0x38	; 56
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e8 e3       	ldi	r30, 0x38	; 56
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <GPIO_writePin+0x10c>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <GPIO_writePin+0x108>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	57 c0       	rjmp	.+174    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	a1 f4       	brne	.+40     	; 0x114a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1122:	a5 e3       	ldi	r26, 0x35	; 53
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e3       	ldi	r30, 0x35	; 53
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <GPIO_writePin+0x13c>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <GPIO_writePin+0x138>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	40 c0       	rjmp	.+128    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    114a:	a5 e3       	ldi	r26, 0x35	; 53
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e3       	ldi	r30, 0x35	; 53
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_writePin+0x164>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_writePin+0x160>
    116c:	80 95       	com	r24
    116e:	84 23       	and	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	2b c0       	rjmp	.+86     	; 0x11ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    117a:	a2 e3       	ldi	r26, 0x32	; 50
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e2 e3       	ldi	r30, 0x32	; 50
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_writePin+0x194>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_writePin+0x190>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11a2:	a2 e3       	ldi	r26, 0x32	; 50
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e2 e3       	ldi	r30, 0x32	; 50
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_writePin+0x1bc>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_writePin+0x1b8>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_readPin+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <GPIO_readPin+0x8>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	8a 83       	std	Y+2, r24	; 0x02
    11ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11ec:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <GPIO_readPin+0x1c>
    11f4:	84 c0       	rjmp	.+264    	; 0x12fe <GPIO_readPin+0x124>
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <GPIO_readPin+0x24>
    11fc:	80 c0       	rjmp	.+256    	; 0x12fe <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3d 83       	std	Y+5, r19	; 0x05
    1206:	2c 83       	std	Y+4, r18	; 0x04
    1208:	4c 81       	ldd	r20, Y+4	; 0x04
    120a:	5d 81       	ldd	r21, Y+5	; 0x05
    120c:	41 30       	cpi	r20, 0x01	; 1
    120e:	51 05       	cpc	r21, r1
    1210:	79 f1       	breq	.+94     	; 0x1270 <GPIO_readPin+0x96>
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	91 05       	cpc	r25, r1
    121a:	34 f4       	brge	.+12     	; 0x1228 <GPIO_readPin+0x4e>
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	21 15       	cp	r18, r1
    1222:	31 05       	cpc	r19, r1
    1224:	69 f0       	breq	.+26     	; 0x1240 <GPIO_readPin+0x66>
    1226:	6b c0       	rjmp	.+214    	; 0x12fe <GPIO_readPin+0x124>
    1228:	4c 81       	ldd	r20, Y+4	; 0x04
    122a:	5d 81       	ldd	r21, Y+5	; 0x05
    122c:	42 30       	cpi	r20, 0x02	; 2
    122e:	51 05       	cpc	r21, r1
    1230:	b9 f1       	breq	.+110    	; 0x12a0 <GPIO_readPin+0xc6>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <GPIO_readPin+0x64>
    123c:	49 c0       	rjmp	.+146    	; 0x12d0 <GPIO_readPin+0xf6>
    123e:	5f c0       	rjmp	.+190    	; 0x12fe <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1240:	e9 e3       	ldi	r30, 0x39	; 57
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <GPIO_readPin+0x7e>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <GPIO_readPin+0x7a>
    125c:	ca 01       	movw	r24, r20
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	90 70       	andi	r25, 0x00	; 0
    1262:	88 23       	and	r24, r24
    1264:	19 f0       	breq	.+6      	; 0x126c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	49 c0       	rjmp	.+146    	; 0x12fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    126c:	19 82       	std	Y+1, r1	; 0x01
    126e:	47 c0       	rjmp	.+142    	; 0x12fe <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1270:	e6 e3       	ldi	r30, 0x36	; 54
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <GPIO_readPin+0xae>
    1284:	55 95       	asr	r21
    1286:	47 95       	ror	r20
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <GPIO_readPin+0xaa>
    128c:	ca 01       	movw	r24, r20
    128e:	81 70       	andi	r24, 0x01	; 1
    1290:	90 70       	andi	r25, 0x00	; 0
    1292:	88 23       	and	r24, r24
    1294:	19 f0       	breq	.+6      	; 0x129c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	31 c0       	rjmp	.+98     	; 0x12fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    129c:	19 82       	std	Y+1, r1	; 0x01
    129e:	2f c0       	rjmp	.+94     	; 0x12fe <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12a0:	e3 e3       	ldi	r30, 0x33	; 51
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_readPin+0xde>
    12b4:	55 95       	asr	r21
    12b6:	47 95       	ror	r20
    12b8:	8a 95       	dec	r24
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <GPIO_readPin+0xda>
    12bc:	ca 01       	movw	r24, r20
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	88 23       	and	r24, r24
    12c4:	19 f0       	breq	.+6      	; 0x12cc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	19 c0       	rjmp	.+50     	; 0x12fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	17 c0       	rjmp	.+46     	; 0x12fe <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    12d0:	e0 e3       	ldi	r30, 0x30	; 48
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <GPIO_readPin+0x10e>
    12e4:	55 95       	asr	r21
    12e6:	47 95       	ror	r20
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <GPIO_readPin+0x10a>
    12ec:	ca 01       	movw	r24, r20
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	90 70       	andi	r25, 0x00	; 0
    12f2:	88 23       	and	r24, r24
    12f4:	19 f0       	breq	.+6      	; 0x12fc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12fc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <GPIO_setupPortDirection+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <GPIO_setupPortDirection+0x8>
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	90 f5       	brcc	.+100    	; 0x138a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3c 83       	std	Y+4, r19	; 0x04
    132e:	2b 83       	std	Y+3, r18	; 0x03
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	d1 f0       	breq	.+52     	; 0x136e <GPIO_setupPortDirection+0x5e>
    133a:	2b 81       	ldd	r18, Y+3	; 0x03
    133c:	3c 81       	ldd	r19, Y+4	; 0x04
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	2c f4       	brge	.+10     	; 0x134e <GPIO_setupPortDirection+0x3e>
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	61 f0       	breq	.+24     	; 0x1364 <GPIO_setupPortDirection+0x54>
    134c:	1e c0       	rjmp	.+60     	; 0x138a <GPIO_setupPortDirection+0x7a>
    134e:	2b 81       	ldd	r18, Y+3	; 0x03
    1350:	3c 81       	ldd	r19, Y+4	; 0x04
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	81 f0       	breq	.+32     	; 0x1378 <GPIO_setupPortDirection+0x68>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	81 f0       	breq	.+32     	; 0x1382 <GPIO_setupPortDirection+0x72>
    1362:	13 c0       	rjmp	.+38     	; 0x138a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1364:	ea e3       	ldi	r30, 0x3A	; 58
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
    136c:	0e c0       	rjmp	.+28     	; 0x138a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    136e:	e7 e3       	ldi	r30, 0x37	; 55
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	80 83       	st	Z, r24
    1376:	09 c0       	rjmp	.+18     	; 0x138a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1378:	e4 e3       	ldi	r30, 0x34	; 52
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	80 83       	st	Z, r24
    1380:	04 c0       	rjmp	.+8      	; 0x138a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1382:	e1 e3       	ldi	r30, 0x31	; 49
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	80 83       	st	Z, r24
			break;
		}
	}
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <GPIO_writePort+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <GPIO_writePort+0x8>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	90 f5       	brcc	.+100    	; 0x1412 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	3c 83       	std	Y+4, r19	; 0x04
    13b6:	2b 83       	std	Y+3, r18	; 0x03
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 05       	cpc	r25, r1
    13c0:	d1 f0       	breq	.+52     	; 0x13f6 <GPIO_writePort+0x5e>
    13c2:	2b 81       	ldd	r18, Y+3	; 0x03
    13c4:	3c 81       	ldd	r19, Y+4	; 0x04
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <GPIO_writePort+0x3e>
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f0       	breq	.+24     	; 0x13ec <GPIO_writePort+0x54>
    13d4:	1e c0       	rjmp	.+60     	; 0x1412 <GPIO_writePort+0x7a>
    13d6:	2b 81       	ldd	r18, Y+3	; 0x03
    13d8:	3c 81       	ldd	r19, Y+4	; 0x04
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	81 f0       	breq	.+32     	; 0x1400 <GPIO_writePort+0x68>
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	91 05       	cpc	r25, r1
    13e8:	81 f0       	breq	.+32     	; 0x140a <GPIO_writePort+0x72>
    13ea:	13 c0       	rjmp	.+38     	; 0x1412 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13ec:	eb e3       	ldi	r30, 0x3B	; 59
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	80 83       	st	Z, r24
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13f6:	e8 e3       	ldi	r30, 0x38	; 56
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
    13fe:	09 c0       	rjmp	.+18     	; 0x1412 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1400:	e5 e3       	ldi	r30, 0x35	; 53
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 83       	st	Z, r24
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    140a:	e2 e3       	ldi	r30, 0x32	; 50
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	80 83       	st	Z, r24
			break;
		}
	}
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <GPIO_readPort+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <GPIO_readPort+0x8>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    142e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	84 30       	cpi	r24, 0x04	; 4
    1434:	90 f5       	brcc	.+100    	; 0x149a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	3c 83       	std	Y+4, r19	; 0x04
    143e:	2b 83       	std	Y+3, r18	; 0x03
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	91 05       	cpc	r25, r1
    1448:	d1 f0       	breq	.+52     	; 0x147e <GPIO_readPort+0x5e>
    144a:	2b 81       	ldd	r18, Y+3	; 0x03
    144c:	3c 81       	ldd	r19, Y+4	; 0x04
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	2c f4       	brge	.+10     	; 0x145e <GPIO_readPort+0x3e>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	61 f0       	breq	.+24     	; 0x1474 <GPIO_readPort+0x54>
    145c:	1e c0       	rjmp	.+60     	; 0x149a <GPIO_readPort+0x7a>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	81 f0       	breq	.+32     	; 0x1488 <GPIO_readPort+0x68>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	83 30       	cpi	r24, 0x03	; 3
    146e:	91 05       	cpc	r25, r1
    1470:	81 f0       	breq	.+32     	; 0x1492 <GPIO_readPort+0x72>
    1472:	13 c0       	rjmp	.+38     	; 0x149a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1474:	e9 e3       	ldi	r30, 0x39	; 57
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	0e c0       	rjmp	.+28     	; 0x149a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    147e:	e6 e3       	ldi	r30, 0x36	; 54
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	09 c0       	rjmp	.+18     	; 0x149a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1488:	e3 e3       	ldi	r30, 0x33	; 51
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	04 c0       	rjmp	.+8      	; 0x149a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1492:	e0 e3       	ldi	r30, 0x30	; 48
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    14d4:	80 91 76 01 	lds	r24, 0x0176
    14d8:	90 91 77 01 	lds	r25, 0x0177
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	29 f0       	breq	.+10     	; 0x14ea <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    14e0:	e0 91 76 01 	lds	r30, 0x0176
    14e4:	f0 91 77 01 	lds	r31, 0x0177
    14e8:	09 95       	icall
	}
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <Icu_init+0x6>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    151e:	a1 e3       	ldi	r26, 0x31	; 49
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e1 e3       	ldi	r30, 0x31	; 49
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8f 7b       	andi	r24, 0xBF	; 191
    152a:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    152c:	ef e4       	ldi	r30, 0x4F	; 79
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8c e0       	ldi	r24, 0x0C	; 12
    1532:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1534:	ae e4       	ldi	r26, 0x4E	; 78
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ee e4       	ldi	r30, 0x4E	; 78
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	98 2f       	mov	r25, r24
    1540:	98 7f       	andi	r25, 0xF8	; 248
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	80 81       	ld	r24, Z
    1548:	89 2b       	or	r24, r25
    154a:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    154c:	ae e4       	ldi	r26, 0x4E	; 78
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ee e4       	ldi	r30, 0x4E	; 78
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	28 2f       	mov	r18, r24
    1558:	2f 7b       	andi	r18, 0xBF	; 191
    155a:	e9 81       	ldd	r30, Y+1	; 0x01
    155c:	fa 81       	ldd	r31, Y+2	; 0x02
    155e:	81 81       	ldd	r24, Z+1	; 0x01
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	00 24       	eor	r0, r0
    1566:	96 95       	lsr	r25
    1568:	87 95       	ror	r24
    156a:	07 94       	ror	r0
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	07 94       	ror	r0
    1572:	98 2f       	mov	r25, r24
    1574:	80 2d       	mov	r24, r0
    1576:	82 2b       	or	r24, r18
    1578:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    157a:	ec e4       	ldi	r30, 0x4C	; 76
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	11 82       	std	Z+1, r1	; 0x01
    1580:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1582:	e6 e4       	ldi	r30, 0x46	; 70
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	11 82       	std	Z+1, r1	; 0x01
    1588:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    158a:	a9 e5       	ldi	r26, 0x59	; 89
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e9 e5       	ldi	r30, 0x59	; 89
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 62       	ori	r24, 0x20	; 32
    1596:	8c 93       	st	X, r24
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <Icu_setCallBack+0x6>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	90 93 77 01 	sts	0x0177, r25
    15b8:	80 93 76 01 	sts	0x0176, r24
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	0f 92       	push	r0
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    15d2:	ae e4       	ldi	r26, 0x4E	; 78
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ee e4       	ldi	r30, 0x4E	; 78
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	28 2f       	mov	r18, r24
    15de:	2f 7b       	andi	r18, 0xBF	; 191
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	00 24       	eor	r0, r0
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	07 94       	ror	r0
    15ee:	96 95       	lsr	r25
    15f0:	87 95       	ror	r24
    15f2:	07 94       	ror	r0
    15f4:	98 2f       	mov	r25, r24
    15f6:	80 2d       	mov	r24, r0
    15f8:	82 2b       	or	r24, r18
    15fa:	8c 93       	st	X, r24
}
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    160c:	e6 e4       	ldi	r30, 0x46	; 70
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	91 81       	ldd	r25, Z+1	; 0x01
}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1622:	ec e4       	ldi	r30, 0x4C	; 76
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	11 82       	std	Z+1, r1	; 0x01
    1628:	10 82       	st	Z, r1
}
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1638:	ef e4       	ldi	r30, 0x4F	; 79
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1
	TCCR1B = 0;
    163e:	ee e4       	ldi	r30, 0x4E	; 78
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
	TCNT1 = 0;
    1644:	ec e4       	ldi	r30, 0x4C	; 76
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	11 82       	std	Z+1, r1	; 0x01
    164a:	10 82       	st	Z, r1
	ICR1 = 0;
    164c:	e6 e4       	ldi	r30, 0x46	; 70
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	11 82       	std	Z+1, r1	; 0x01
    1652:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1654:	a9 e5       	ldi	r26, 0x59	; 89
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e9 e5       	ldi	r30, 0x59	; 89
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8f 7d       	andi	r24, 0xDF	; 223
    1660:	8c 93       	st	X, r24
}
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <__vector_1>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;



ISR(INT0_vect)
{
    1668:	1f 92       	push	r1
    166a:	0f 92       	push	r0
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	0f 92       	push	r0
    1670:	11 24       	eor	r1, r1
    1672:	2f 93       	push	r18
    1674:	3f 93       	push	r19
    1676:	4f 93       	push	r20
    1678:	5f 93       	push	r21
    167a:	6f 93       	push	r22
    167c:	7f 93       	push	r23
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	af 93       	push	r26
    1684:	bf 93       	push	r27
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1692:	80 91 78 01 	lds	r24, 0x0178
    1696:	90 91 79 01 	lds	r25, 0x0179
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	29 f0       	breq	.+10     	; 0x16a8 <__vector_1+0x40>
	{
		(*g_callBackPtr)();
    169e:	e0 91 78 01 	lds	r30, 0x0178
    16a2:	f0 91 79 01 	lds	r31, 0x0179
    16a6:	09 95       	icall
	}

}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	ff 91       	pop	r31
    16ae:	ef 91       	pop	r30
    16b0:	bf 91       	pop	r27
    16b2:	af 91       	pop	r26
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	7f 91       	pop	r23
    16ba:	6f 91       	pop	r22
    16bc:	5f 91       	pop	r21
    16be:	4f 91       	pop	r20
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <INT0_init>:



void INT0_init(void)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	62 e0       	ldi	r22, 0x02	; 2
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN2_ID, LOGIC_HIGH);
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	62 e0       	ldi	r22, 0x02	; 2
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	MCUCR |=(1<<ISC00);
    16ea:	a5 e5       	ldi	r26, 0x55	; 85
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e5 e5       	ldi	r30, 0x55	; 85
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	81 60       	ori	r24, 0x01	; 1
    16f6:	8c 93       	st	X, r24
	GICR |=(1<<INT0);
    16f8:	ab e5       	ldi	r26, 0x5B	; 91
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	eb e5       	ldi	r30, 0x5B	; 91
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	80 64       	ori	r24, 0x40	; 64
    1704:	8c 93       	st	X, r24
}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <INT0_setCallBack>:



void INT0_setCallBack(void(*a_ptr)(void))
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <INT0_setCallBack+0x6>
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr=a_ptr;
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	90 93 79 01 	sts	0x0179, r25
    1722:	80 93 78 01 	sts	0x0178, r24
}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <PWM_Timer0_Start>:
 * 3. Setup the prescaler with F_CPU/8
 * 4. Setup the compare value based on the required input duty cycle
 * 5. Setup the direction for OC0 as output pin
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Timer0 initial value */
    1740:	e2 e5       	ldi	r30, 0x52	; 82
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	10 82       	st	Z, r1

	OCR0  = ((float)duty_cycle / 100) * 255; /* Set Compare value */
    1746:	0c e5       	ldi	r16, 0x5C	; 92
    1748:	10 e0       	ldi	r17, 0x00	; 0
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	a0 e0       	ldi	r26, 0x00	; 0
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	bc 01       	movw	r22, r24
    1762:	cd 01       	movw	r24, r26
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	48 ec       	ldi	r20, 0xC8	; 200
    176a:	52 e4       	ldi	r21, 0x42	; 66
    176c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	53 e4       	ldi	r21, 0x43	; 67
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	f8 01       	movw	r30, r16
    1796:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1798:	e3 e5       	ldi	r30, 0x53	; 83
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8a e6       	ldi	r24, 0x6A	; 106
    179e:	80 83       	st	Z, r24

	/* Configure PB3/ OC0 as output pin --> pin where the PWM signal is generated from Timer0 */
	GPIO_setupPinDirection(TIMER0_OCO_PORT_ID,TIMER0_OCO_PIN_ID,PIN_OUTPUT);
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	63 e0       	ldi	r22, 0x03	; 3
    17a4:	41 e0       	ldi	r20, 0x01	; 1
    17a6:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
}
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	08 95       	ret

000017b6 <__vector_11>:




ISR(TIMER0_OVF_vect)
{
    17b6:	1f 92       	push	r1
    17b8:	0f 92       	push	r0
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	0f 92       	push	r0
    17be:	11 24       	eor	r1, r1
    17c0:	2f 93       	push	r18
    17c2:	3f 93       	push	r19
    17c4:	4f 93       	push	r20
    17c6:	5f 93       	push	r21
    17c8:	6f 93       	push	r22
    17ca:	7f 93       	push	r23
    17cc:	8f 93       	push	r24
    17ce:	9f 93       	push	r25
    17d0:	af 93       	push	r26
    17d2:	bf 93       	push	r27
    17d4:	ef 93       	push	r30
    17d6:	ff 93       	push	r31
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    17e0:	80 91 7a 01 	lds	r24, 0x017A
    17e4:	90 91 7b 01 	lds	r25, 0x017B
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	29 f0       	breq	.+10     	; 0x17f6 <__vector_11+0x40>
	{
		(*g_callBackPtr)();
    17ec:	e0 91 7a 01 	lds	r30, 0x017A
    17f0:	f0 91 7b 01 	lds	r31, 0x017B
    17f4:	09 95       	icall
	}

}
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	ff 91       	pop	r31
    17fc:	ef 91       	pop	r30
    17fe:	bf 91       	pop	r27
    1800:	af 91       	pop	r26
    1802:	9f 91       	pop	r25
    1804:	8f 91       	pop	r24
    1806:	7f 91       	pop	r23
    1808:	6f 91       	pop	r22
    180a:	5f 91       	pop	r21
    180c:	4f 91       	pop	r20
    180e:	3f 91       	pop	r19
    1810:	2f 91       	pop	r18
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	0f 90       	pop	r0
    1818:	1f 90       	pop	r1
    181a:	18 95       	reti

0000181c <Timer0_Ovf_Start>:



void Timer0_Ovf_Start(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
    1824:	e2 e5       	ldi	r30, 0x52	; 82
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	10 82       	st	Z, r1

	TCCR0 |=(1<<FOC0) |(1<<CS00);
    182a:	a3 e5       	ldi	r26, 0x53	; 83
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e3 e5       	ldi	r30, 0x53	; 83
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	81 68       	ori	r24, 0x81	; 129
    1836:	8c 93       	st	X, r24


	TIMSK |=(1<<TOIE0);
    1838:	a9 e5       	ldi	r26, 0x59	; 89
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e9 e5       	ldi	r30, 0x59	; 89
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	8c 93       	st	X, r24
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <Timer0_setCallBack+0x6>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr=a_ptr;
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	90 93 7b 01 	sts	0x017B, r25
    1862:	80 93 7a 01 	sts	0x017A, r24
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <__vector_7>:
#include <avr/interrupt.h>

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    189a:	80 91 7c 01 	lds	r24, 0x017C
    189e:	90 91 7d 01 	lds	r25, 0x017D
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	29 f0       	breq	.+10     	; 0x18b0 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    18a6:	e0 91 7c 01 	lds	r30, 0x017C
    18aa:	f0 91 7d 01 	lds	r31, 0x017D
    18ae:	09 95       	icall
	}

}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	bf 91       	pop	r27
    18ba:	af 91       	pop	r26
    18bc:	9f 91       	pop	r25
    18be:	8f 91       	pop	r24
    18c0:	7f 91       	pop	r23
    18c2:	6f 91       	pop	r22
    18c4:	5f 91       	pop	r21
    18c6:	4f 91       	pop	r20
    18c8:	3f 91       	pop	r19
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	0f 90       	pop	r0
    18d2:	1f 90       	pop	r1
    18d4:	18 95       	reti

000018d6 <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    18d6:	1f 92       	push	r1
    18d8:	0f 92       	push	r0
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	0f 92       	push	r0
    18de:	11 24       	eor	r1, r1
    18e0:	2f 93       	push	r18
    18e2:	3f 93       	push	r19
    18e4:	4f 93       	push	r20
    18e6:	5f 93       	push	r21
    18e8:	6f 93       	push	r22
    18ea:	7f 93       	push	r23
    18ec:	8f 93       	push	r24
    18ee:	9f 93       	push	r25
    18f0:	af 93       	push	r26
    18f2:	bf 93       	push	r27
    18f4:	ef 93       	push	r30
    18f6:	ff 93       	push	r31
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1900:	80 91 7c 01 	lds	r24, 0x017C
    1904:	90 91 7d 01 	lds	r25, 0x017D
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	29 f0       	breq	.+10     	; 0x1916 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    190c:	e0 91 7c 01 	lds	r30, 0x017C
    1910:	f0 91 7d 01 	lds	r31, 0x017D
    1914:	09 95       	icall
	}
}
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	7f 91       	pop	r23
    1928:	6f 91       	pop	r22
    192a:	5f 91       	pop	r21
    192c:	4f 91       	pop	r20
    192e:	3f 91       	pop	r19
    1930:	2f 91       	pop	r18
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	0f 90       	pop	r0
    1938:	1f 90       	pop	r1
    193a:	18 95       	reti

0000193c <Timer1_init>:


void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <Timer1_init+0x6>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value;
    194a:	ac e4       	ldi	r26, 0x4C	; 76
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e9 81       	ldd	r30, Y+1	; 0x01
    1950:	fa 81       	ldd	r31, Y+2	; 0x02
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	9c 93       	st	X, r25
    195a:	8e 93       	st	-X, r24

	OCR1A=Config_Ptr->compare_value; //750-2500
    195c:	aa e4       	ldi	r26, 0x4A	; 74
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e9 81       	ldd	r30, Y+1	; 0x01
    1962:	fa 81       	ldd	r31, Y+2	; 0x02
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	11 96       	adiw	r26, 0x01	; 1
    196a:	9c 93       	st	X, r25
    196c:	8e 93       	st	-X, r24

	ICR1=Config_Ptr->ICR1_value;
    196e:	a6 e4       	ldi	r26, 0x46	; 70
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e9 81       	ldd	r30, Y+1	; 0x01
    1974:	fa 81       	ldd	r31, Y+2	; 0x02
    1976:	84 81       	ldd	r24, Z+4	; 0x04
    1978:	95 81       	ldd	r25, Z+5	; 0x05
    197a:	11 96       	adiw	r26, 0x01	; 1
    197c:	9c 93       	st	X, r25
    197e:	8e 93       	st	-X, r24

	if((Config_Ptr->mode)==NORMAL)
    1980:	e9 81       	ldd	r30, Y+1	; 0x01
    1982:	fa 81       	ldd	r31, Y+2	; 0x02
    1984:	87 81       	ldd	r24, Z+7	; 0x07
    1986:	88 23       	and	r24, r24
    1988:	41 f4       	brne	.+16     	; 0x199a <Timer1_init+0x5e>
	{
		TIMSK |= (1<<TOIE1);
    198a:	a9 e5       	ldi	r26, 0x59	; 89
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e9 e5       	ldi	r30, 0x59	; 89
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	84 60       	ori	r24, 0x04	; 4
    1996:	8c 93       	st	X, r24
    1998:	0c c0       	rjmp	.+24     	; 0x19b2 <Timer1_init+0x76>

	}
	else if((Config_Ptr->mode)==CTC)
    199a:	e9 81       	ldd	r30, Y+1	; 0x01
    199c:	fa 81       	ldd	r31, Y+2	; 0x02
    199e:	87 81       	ldd	r24, Z+7	; 0x07
    19a0:	84 30       	cpi	r24, 0x04	; 4
    19a2:	39 f4       	brne	.+14     	; 0x19b2 <Timer1_init+0x76>
	{
		TIMSK |= (1<<OCIE1A);
    19a4:	a9 e5       	ldi	r26, 0x59	; 89
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e9 e5       	ldi	r30, 0x59	; 89
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 61       	ori	r24, 0x10	; 16
    19b0:	8c 93       	st	X, r24
	}


	if((Config_Ptr->mode)==FAST_PWM_ICR1)
    19b2:	e9 81       	ldd	r30, Y+1	; 0x01
    19b4:	fa 81       	ldd	r31, Y+2	; 0x02
    19b6:	87 81       	ldd	r24, Z+7	; 0x07
    19b8:	8e 30       	cpi	r24, 0x0E	; 14
    19ba:	41 f4       	brne	.+16     	; 0x19cc <Timer1_init+0x90>
	{
		TCCR1A |= (1<<COM1A1);
    19bc:	af e4       	ldi	r26, 0x4F	; 79
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ef e4       	ldi	r30, 0x4F	; 79
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 68       	ori	r24, 0x80	; 128
    19c8:	8c 93       	st	X, r24
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <Timer1_init+0x9e>
	}
	else
	{
		TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    19cc:	af e4       	ldi	r26, 0x4F	; 79
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ef e4       	ldi	r30, 0x4F	; 79
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	8c 60       	ori	r24, 0x0C	; 12
    19d8:	8c 93       	st	X, r24
	}


	TCCR1A |= (GET_BIT((Config_Ptr->mode),0 ) << WGM10)
    19da:	af e4       	ldi	r26, 0x4F	; 79
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ef e4       	ldi	r30, 0x4F	; 79
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	98 2f       	mov	r25, r24
    19e6:	e9 81       	ldd	r30, Y+1	; 0x01
    19e8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ea:	87 81       	ldd	r24, Z+7	; 0x07
    19ec:	83 70       	andi	r24, 0x03	; 3
    19ee:	89 2b       	or	r24, r25
    19f0:	8c 93       	st	X, r24
					 |(GET_BIT((Config_Ptr->mode),1 ) << WGM11);


	TCCR1B |=  ((Config_Ptr->prescaler & 0x07)<< CS10)
    19f2:	ae e4       	ldi	r26, 0x4E	; 78
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ee e4       	ldi	r30, 0x4E	; 78
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	38 2f       	mov	r19, r24
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	86 81       	ldd	r24, Z+6	; 0x06
    1a04:	28 2f       	mov	r18, r24
    1a06:	27 70       	andi	r18, 0x07	; 7
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	87 81       	ldd	r24, Z+7	; 0x07
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	84 70       	andi	r24, 0x04	; 4
    1a14:	90 70       	andi	r25, 0x00	; 0
    1a16:	95 95       	asr	r25
    1a18:	87 95       	ror	r24
    1a1a:	95 95       	asr	r25
    1a1c:	87 95       	ror	r24
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	28 2b       	or	r18, r24
    1a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a30:	87 81       	ldd	r24, Z+7	; 0x07
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	88 70       	andi	r24, 0x08	; 8
    1a38:	90 70       	andi	r25, 0x00	; 0
    1a3a:	95 95       	asr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	95 95       	asr	r25
    1a40:	87 95       	ror	r24
    1a42:	95 95       	asr	r25
    1a44:	87 95       	ror	r24
    1a46:	82 95       	swap	r24
    1a48:	92 95       	swap	r25
    1a4a:	90 7f       	andi	r25, 0xF0	; 240
    1a4c:	98 27       	eor	r25, r24
    1a4e:	80 7f       	andi	r24, 0xF0	; 240
    1a50:	98 27       	eor	r25, r24
    1a52:	82 2b       	or	r24, r18
    1a54:	83 2b       	or	r24, r19
    1a56:	8c 93       	st	X, r24

    	    						  |(GET_BIT((Config_Ptr->mode),2 ) << WGM12)
									  |(GET_BIT((Config_Ptr->mode),3 ) << WGM13);
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <Timer1_deInit>:

void Timer1_deInit(void)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1a6a:	ef e4       	ldi	r30, 0x4F	; 79
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	10 82       	st	Z, r1
	TCCR1B = 0;
    1a70:	ee e4       	ldi	r30, 0x4E	; 78
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	10 82       	st	Z, r1
	TCNT1 = 0;
    1a76:	ec e4       	ldi	r30, 0x4C	; 76
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	11 82       	std	Z+1, r1	; 0x01
    1a7c:	10 82       	st	Z, r1
	ICR1 = 0;
    1a7e:	e6 e4       	ldi	r30, 0x46	; 70
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	11 82       	std	Z+1, r1	; 0x01
    1a84:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE1) &~(1<<OCIE1A) ;
    1a86:	a9 e5       	ldi	r26, 0x59	; 89
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e9 e5       	ldi	r30, 0x59	; 89
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8b 7e       	andi	r24, 0xEB	; 235
    1a92:	8c 93       	st	X, r24
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <TIMER1_set_OCR1A>:


void TIMER1_set_OCR1A(uint16 duty)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	2a 97       	sbiw	r28, 0x0a	; 10
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	9a 87       	std	Y+10, r25	; 0x0a
    1ab0:	89 87       	std	Y+9, r24	; 0x09
	Timer1_ConfigType timer1_config_ptr={0,duty ,19999,F_CPU_8_TIMER1,FAST_PWM_ICR1};
    1ab2:	1a 82       	std	Y+2, r1	; 0x02
    1ab4:	19 82       	std	Y+1, r1	; 0x01
    1ab6:	89 85       	ldd	r24, Y+9	; 0x09
    1ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	8b 83       	std	Y+3, r24	; 0x03
    1abe:	8f e1       	ldi	r24, 0x1F	; 31
    1ac0:	9e e4       	ldi	r25, 0x4E	; 78
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	8f 83       	std	Y+7, r24	; 0x07
    1aca:	8e e0       	ldi	r24, 0x0E	; 14
    1acc:	88 87       	std	Y+8, r24	; 0x08
	/* Setup the two motor pins as output pins */
	Timer1_init(&timer1_config_ptr);
    1ace:	ce 01       	movw	r24, r28
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	0e 94 9e 0c 	call	0x193c	; 0x193c <Timer1_init>
}
    1ad6:	2a 96       	adiw	r28, 0x0a	; 10
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void))
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <Timer1_setCallBack+0x6>
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr=a_ptr;
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	90 93 7d 01 	sts	0x017D, r25
    1afe:	80 93 7c 01 	sts	0x017C, r24
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <UART_init>:
#include "../mcu_config/private.h"
#include "uart.h"
#include "../mcu_config/common_macros.h"

void UART_init(const UART_ConfigType *Config_Ptr)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <UART_init+0x6>
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <UART_init+0x8>
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	9c 83       	std	Y+4, r25	; 0x04
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value;

	UCSRA = (1<<U2X);
    1b1c:	eb e2       	ldi	r30, 0x2B	; 43
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	80 83       	st	Z, r24

	UCSRB= (1<<TXEN) | (1<<RXEN)
    1b24:	aa e2       	ldi	r26, 0x2A	; 42
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b2c:	80 81       	ld	r24, Z
    1b2e:	84 70       	andi	r24, 0x04	; 4
    1b30:	88 61       	ori	r24, 0x18	; 24
    1b32:	8c 93       	st	X, r24

										 | ( GET_BIT((Config_Ptr->bit_data) ,2 ) <<UCSZ2);

	UCSRC= (1<<URSEL)
    1b34:	a9 e2       	ldi	r26, 0x29	; 41
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	eb 81       	ldd	r30, Y+3	; 0x03
    1b3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	81 70       	andi	r24, 0x01	; 1
    1b44:	90 70       	andi	r25, 0x00	; 0
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	20 68       	ori	r18, 0x80	; 128
    1b4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b50:	fc 81       	ldd	r31, Y+4	; 0x04
    1b52:	80 81       	ld	r24, Z
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	82 70       	andi	r24, 0x02	; 2
    1b5a:	90 70       	andi	r25, 0x00	; 0
    1b5c:	95 95       	asr	r25
    1b5e:	87 95       	ror	r24
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	28 2b       	or	r18, r24
    1b6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b6e:	81 81       	ldd	r24, Z+1	; 0x01
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	81 70       	andi	r24, 0x01	; 1
    1b76:	90 70       	andi	r25, 0x00	; 0
    1b78:	82 95       	swap	r24
    1b7a:	92 95       	swap	r25
    1b7c:	90 7f       	andi	r25, 0xF0	; 240
    1b7e:	98 27       	eor	r25, r24
    1b80:	80 7f       	andi	r24, 0xF0	; 240
    1b82:	98 27       	eor	r25, r24
    1b84:	28 2b       	or	r18, r24
    1b86:	eb 81       	ldd	r30, Y+3	; 0x03
    1b88:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8a:	81 81       	ldd	r24, Z+1	; 0x01
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	82 70       	andi	r24, 0x02	; 2
    1b92:	90 70       	andi	r25, 0x00	; 0
    1b94:	95 95       	asr	r25
    1b96:	87 95       	ror	r24
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	82 95       	swap	r24
    1b9e:	92 95       	swap	r25
    1ba0:	90 7f       	andi	r25, 0xF0	; 240
    1ba2:	98 27       	eor	r25, r24
    1ba4:	80 7f       	andi	r24, 0xF0	; 240
    1ba6:	98 27       	eor	r25, r24
    1ba8:	28 2b       	or	r18, r24
    1baa:	eb 81       	ldd	r30, Y+3	; 0x03
    1bac:	fc 81       	ldd	r31, Y+4	; 0x04
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	82 2b       	or	r24, r18
    1bc2:	8c 93       	st	X, r24
										   | (GET_BIT((Config_Ptr->parity) , 1)<< UPM1)

										   | ((Config_Ptr->stop_bit) << USBS);


	ubrr_value=(uint16) ((F_CPU / ((Config_Ptr->baud_rate)* 8UL)) -1);
    1bc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc8:	83 81       	ldd	r24, Z+3	; 0x03
    1bca:	94 81       	ldd	r25, Z+4	; 0x04
    1bcc:	cc 01       	movw	r24, r24
    1bce:	a0 e0       	ldi	r26, 0x00	; 0
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	aa 1f       	adc	r26, r26
    1bd8:	bb 1f       	adc	r27, r27
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	aa 1f       	adc	r26, r26
    1be0:	bb 1f       	adc	r27, r27
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	aa 1f       	adc	r26, r26
    1be8:	bb 1f       	adc	r27, r27
    1bea:	9c 01       	movw	r18, r24
    1bec:	ad 01       	movw	r20, r26
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	92 e1       	ldi	r25, 0x12	; 18
    1bf2:	aa e7       	ldi	r26, 0x7A	; 122
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 2b 18 	call	0x3056	; 0x3056 <__udivmodsi4>
    1bfe:	da 01       	movw	r26, r20
    1c00:	c9 01       	movw	r24, r18
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01

	UBRRH =ubrr_value>>8;
    1c08:	ec e2       	ldi	r30, 0x2C	; 44
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	89 2f       	mov	r24, r25
    1c12:	99 27       	eor	r25, r25
    1c14:	80 83       	st	Z, r24
	UBRRL =ubrr_value;
    1c16:	e9 e2       	ldi	r30, 0x29	; 41
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	80 83       	st	Z, r24
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <UART_sendByte>:


void UART_sendByte(uint8 data)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	0f 92       	push	r0
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1c38:	eb e2       	ldi	r30, 0x2B	; 43
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	80 72       	andi	r24, 0x20	; 32
    1c44:	90 70       	andi	r25, 0x00	; 0
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	b9 f3       	breq	.-18     	; 0x1c38 <UART_sendByte+0xc>

	UDR=data;
    1c4a:	ec e2       	ldi	r30, 0x2C	; 44
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	80 83       	st	Z, r24
}
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1c62:	eb e2       	ldi	r30, 0x2B	; 43
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 23       	and	r24, r24
    1c6a:	dc f7       	brge	.-10     	; 0x1c62 <UART_recieveByte+0x8>

	return UDR;
    1c6c:	ec e2       	ldi	r30, 0x2C	; 44
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
}
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <UART_sendString>:


void UART_sendString(const uint8 *str)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <UART_sendString+0x6>
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	9a 83       	std	Y+2, r25	; 0x02
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	0a c0       	rjmp	.+20     	; 0x1c9c <UART_sendString+0x24>
	while(*str != '\0')
	{
		UART_sendByte(*str);
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	80 81       	ld	r24, Z
    1c8e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <UART_sendByte>
		str++;
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	01 96       	adiw	r24, 0x01	; 1
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
}


void UART_sendString(const uint8 *str)
{
	while(*str != '\0')
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	80 81       	ld	r24, Z
    1ca2:	88 23       	and	r24, r24
    1ca4:	89 f7       	brne	.-30     	; 0x1c88 <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <UART_sendDecimal>:


void UART_sendDecimal(uint8 ch)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <UART_sendDecimal+0x6>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Reversed = 1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	89 83       	std	Y+1, r24	; 0x01

	if(0 == ch)
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	88 23       	and	r24, r24
    1cc4:	01 f5       	brne	.+64     	; 0x1d06 <UART_sendDecimal+0x56>
	{
		UART_sendByte('0');
    1cc6:	80 e3       	ldi	r24, 0x30	; 48
    1cc8:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <UART_sendByte>
    1ccc:	1c c0       	rjmp	.+56     	; 0x1d06 <UART_sendDecimal+0x56>
	 *
	 * Local_u8Reversed =4321
	 */
	while(0 != ch){

		Local_u8Reversed = ((Local_u8Reversed * 10) + (ch % 10));
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9c 01       	movw	r18, r24
    1cd6:	22 0f       	add	r18, r18
    1cd8:	33 1f       	adc	r19, r19
    1cda:	c9 01       	movw	r24, r18
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	82 0f       	add	r24, r18
    1ce6:	93 1f       	adc	r25, r19
    1ce8:	28 2f       	mov	r18, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9a e0       	ldi	r25, 0x0A	; 10
    1cee:	69 2f       	mov	r22, r25
    1cf0:	0e 94 0b 18 	call	0x3016	; 0x3016 <__udivmodqi4>
    1cf4:	89 2f       	mov	r24, r25
    1cf6:	82 0f       	add	r24, r18
    1cf8:	89 83       	std	Y+1, r24	; 0x01
		ch /= 10;
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	9a e0       	ldi	r25, 0x0A	; 10
    1cfe:	69 2f       	mov	r22, r25
    1d00:	0e 94 0b 18 	call	0x3016	; 0x3016 <__udivmodqi4>
    1d04:	8a 83       	std	Y+2, r24	; 0x02

	/* ch=1234
	 *
	 * Local_u8Reversed =4321
	 */
	while(0 != ch){
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	88 23       	and	r24, r24
    1d0a:	09 f7       	brne	.-62     	; 0x1cce <UART_sendDecimal+0x1e>
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <UART_sendDecimal+0x7c>
	 * (5)Local_u8Reversed =0
	 */
	while(1 != Local_u8Reversed)
	{

		UART_sendByte((Local_u8Reversed % 10 ) + 48);
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a e0       	ldi	r25, 0x0A	; 10
    1d12:	69 2f       	mov	r22, r25
    1d14:	0e 94 0b 18 	call	0x3016	; 0x3016 <__udivmodqi4>
    1d18:	89 2f       	mov	r24, r25
    1d1a:	80 5d       	subi	r24, 0xD0	; 208
    1d1c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <UART_sendByte>
		Local_u8Reversed /= 10;
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a e0       	ldi	r25, 0x0A	; 10
    1d24:	69 2f       	mov	r22, r25
    1d26:	0e 94 0b 18 	call	0x3016	; 0x3016 <__udivmodqi4>
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	 * (2)Local_u8Reversed =432
	 * (3)Local_u8Reversed =43
	 * (4)Local_u8Reversed =4
	 * (5)Local_u8Reversed =0
	 */
	while(1 != Local_u8Reversed)
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	71 f7       	brne	.-36     	; 0x1d0e <UART_sendDecimal+0x5e>
	{

		UART_sendByte((Local_u8Reversed % 10 ) + 48);
		Local_u8Reversed /= 10;
	}
}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <UART_receiveString>:



void UART_receiveString(uint8 *str)
{
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <UART_receiveString+0xa>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9b 83       	std	Y+3, r25	; 0x03
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1d50:	19 82       	std	Y+1, r1	; 0x01

	str[i]=UART_recieveByte();
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5c:	8c 01       	movw	r16, r24
    1d5e:	02 0f       	add	r16, r18
    1d60:	13 1f       	adc	r17, r19
    1d62:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <UART_recieveByte>
    1d66:	f8 01       	movw	r30, r16
    1d68:	80 83       	st	Z, r24
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <UART_receiveString+0x4e>

	while(str[i] != '#')
	{
		i++;
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	8f 5f       	subi	r24, 0xFF	; 255
    1d70:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_recieveByte();
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	8c 01       	movw	r16, r24
    1d7e:	02 0f       	add	r16, r18
    1d80:	13 1f       	adc	r17, r19
    1d82:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <UART_recieveByte>
    1d86:	f8 01       	movw	r30, r16
    1d88:	80 83       	st	Z, r24
{
	uint8 i=0;

	str[i]=UART_recieveByte();

	while(str[i] != '#')
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	fc 01       	movw	r30, r24
    1d96:	e2 0f       	add	r30, r18
    1d98:	f3 1f       	adc	r31, r19
    1d9a:	80 81       	ld	r24, Z
    1d9c:	83 32       	cpi	r24, 0x23	; 35
    1d9e:	31 f7       	brne	.-52     	; 0x1d6c <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_recieveByte();
	}
	str[i]='\0';
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	9b 81       	ldd	r25, Y+3	; 0x03
    1daa:	fc 01       	movw	r30, r24
    1dac:	e2 0f       	add	r30, r18
    1dae:	f3 1f       	adc	r31, r19
    1db0:	10 82       	st	Z, r1
}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	08 95       	ret

00001dc2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	2e 97       	sbiw	r28, 0x0e	; 14
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS , E and RW pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	62 e0       	ldi	r22, 0x02	; 2
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 ea       	ldi	r26, 0xA0	; 160
    1dfa:	b1 e4       	ldi	r27, 0x41	; 65
    1dfc:	8b 87       	std	Y+11, r24	; 0x0b
    1dfe:	9c 87       	std	Y+12, r25	; 0x0c
    1e00:	ad 87       	std	Y+13, r26	; 0x0d
    1e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a ef       	ldi	r20, 0xFA	; 250
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8f 83       	std	Y+7, r24	; 0x07
    1e1e:	98 87       	std	Y+8, r25	; 0x08
    1e20:	a9 87       	std	Y+9, r26	; 0x09
    1e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <LCD_init+0x84>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9e 83       	std	Y+6, r25	; 0x06
    1e42:	8d 83       	std	Y+5, r24	; 0x05
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <LCD_init+0x102>
	else if (__tmp > 65535)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	4c f5       	brge	.+82     	; 0x1eb0 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <LCD_init+0xe4>
    1e88:	88 ec       	ldi	r24, 0xC8	; 200
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_init+0xd2>
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f7       	brne	.-38     	; 0x1e88 <LCD_init+0xc6>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_init+0x10e>
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	6f ef       	ldi	r22, 0xFF	; 255
    1edc:	0e 94 88 09 	call	0x1310	; 0x1310 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1ee0:	88 e3       	ldi	r24, 0x38	; 56
    1ee2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ee6:	8c e0       	ldi	r24, 0x0C	; 12
    1ee8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <LCD_sendCommand>
}
    1ef2:	2e 96       	adiw	r28, 0x0e	; 14
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	e9 97       	sbiw	r28, 0x39	; 57
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* Instruction Mode RW=0 */
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e8       	ldi	r26, 0x80	; 128
    1f34:	bf e3       	ldi	r27, 0x3F	; 63
    1f36:	8d ab       	std	Y+53, r24	; 0x35
    1f38:	9e ab       	std	Y+54, r25	; 0x36
    1f3a:	af ab       	std	Y+55, r26	; 0x37
    1f3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f40:	7e a9       	ldd	r23, Y+54	; 0x36
    1f42:	8f a9       	ldd	r24, Y+55	; 0x37
    1f44:	98 ad       	ldd	r25, Y+56	; 0x38
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a ef       	ldi	r20, 0xFA	; 250
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	89 ab       	std	Y+49, r24	; 0x31
    1f58:	9a ab       	std	Y+50, r25	; 0x32
    1f5a:	ab ab       	std	Y+51, r26	; 0x33
    1f5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f60:	7a a9       	ldd	r23, Y+50	; 0x32
    1f62:	8b a9       	ldd	r24, Y+51	; 0x33
    1f64:	9c a9       	ldd	r25, Y+52	; 0x34
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	98 ab       	std	Y+48, r25	; 0x30
    1f7c:	8f a7       	std	Y+47, r24	; 0x2f
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1f80:	69 a9       	ldd	r22, Y+49	; 0x31
    1f82:	7a a9       	ldd	r23, Y+50	; 0x32
    1f84:	8b a9       	ldd	r24, Y+51	; 0x33
    1f86:	9c a9       	ldd	r25, Y+52	; 0x34
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	3f ef       	ldi	r19, 0xFF	; 255
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	57 e4       	ldi	r21, 0x47	; 71
    1f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	4c f5       	brge	.+82     	; 0x1fea <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	98 ab       	std	Y+48, r25	; 0x30
    1fbe:	8f a7       	std	Y+47, r24	; 0x2f
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_sendCommand+0xdc>
    1fc2:	88 ec       	ldi	r24, 0xC8	; 200
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9e a7       	std	Y+46, r25	; 0x2e
    1fc8:	8d a7       	std	Y+45, r24	; 0x2d
    1fca:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fcc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_sendCommand+0xca>
    1fd2:	9e a7       	std	Y+46, r25	; 0x2e
    1fd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	98 ab       	std	Y+48, r25	; 0x30
    1fde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <LCD_sendCommand+0xbe>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	69 a9       	ldd	r22, Y+49	; 0x31
    1fec:	7a a9       	ldd	r23, Y+50	; 0x32
    1fee:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	98 ab       	std	Y+48, r25	; 0x30
    1ffc:	8f a7       	std	Y+47, r24	; 0x2f
    1ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2000:	98 a9       	ldd	r25, Y+48	; 0x30
    2002:	9c a7       	std	Y+44, r25	; 0x2c
    2004:	8b a7       	std	Y+43, r24	; 0x2b
    2006:	8b a5       	ldd	r24, Y+43	; 0x2b
    2008:	9c a5       	ldd	r25, Y+44	; 0x2c
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_sendCommand+0x106>
    200e:	9c a7       	std	Y+44, r25	; 0x2c
    2010:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	62 e0       	ldi	r22, 0x02	; 2
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a0 e8       	ldi	r26, 0x80	; 128
    2022:	bf e3       	ldi	r27, 0x3F	; 63
    2024:	8f a3       	std	Y+39, r24	; 0x27
    2026:	98 a7       	std	Y+40, r25	; 0x28
    2028:	a9 a7       	std	Y+41, r26	; 0x29
    202a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202c:	6f a1       	ldd	r22, Y+39	; 0x27
    202e:	78 a5       	ldd	r23, Y+40	; 0x28
    2030:	89 a5       	ldd	r24, Y+41	; 0x29
    2032:	9a a5       	ldd	r25, Y+42	; 0x2a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4a ef       	ldi	r20, 0xFA	; 250
    203a:	54 e4       	ldi	r21, 0x44	; 68
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8b a3       	std	Y+35, r24	; 0x23
    2046:	9c a3       	std	Y+36, r25	; 0x24
    2048:	ad a3       	std	Y+37, r26	; 0x25
    204a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    204c:	6b a1       	ldd	r22, Y+35	; 0x23
    204e:	7c a1       	ldd	r23, Y+36	; 0x24
    2050:	8d a1       	ldd	r24, Y+37	; 0x25
    2052:	9e a1       	ldd	r25, Y+38	; 0x26
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e8       	ldi	r20, 0x80	; 128
    205a:	5f e3       	ldi	r21, 0x3F	; 63
    205c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2060:	88 23       	and	r24, r24
    2062:	2c f4       	brge	.+10     	; 0x206e <LCD_sendCommand+0x16a>
		__ticks = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9a a3       	std	Y+34, r25	; 0x22
    206a:	89 a3       	std	Y+33, r24	; 0x21
    206c:	3f c0       	rjmp	.+126    	; 0x20ec <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    206e:	6b a1       	ldd	r22, Y+35	; 0x23
    2070:	7c a1       	ldd	r23, Y+36	; 0x24
    2072:	8d a1       	ldd	r24, Y+37	; 0x25
    2074:	9e a1       	ldd	r25, Y+38	; 0x26
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	3f ef       	ldi	r19, 0xFF	; 255
    207a:	4f e7       	ldi	r20, 0x7F	; 127
    207c:	57 e4       	ldi	r21, 0x47	; 71
    207e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2082:	18 16       	cp	r1, r24
    2084:	4c f5       	brge	.+82     	; 0x20d8 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2086:	6f a1       	ldd	r22, Y+39	; 0x27
    2088:	78 a5       	ldd	r23, Y+40	; 0x28
    208a:	89 a5       	ldd	r24, Y+41	; 0x29
    208c:	9a a5       	ldd	r25, Y+42	; 0x2a
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9a a3       	std	Y+34, r25	; 0x22
    20ac:	89 a3       	std	Y+33, r24	; 0x21
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <LCD_sendCommand+0x1ca>
    20b0:	88 ec       	ldi	r24, 0xC8	; 200
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	98 a3       	std	Y+32, r25	; 0x20
    20b6:	8f 8f       	std	Y+31, r24	; 0x1f
    20b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ba:	98 a1       	ldd	r25, Y+32	; 0x20
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <LCD_sendCommand+0x1b8>
    20c0:	98 a3       	std	Y+32, r25	; 0x20
    20c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c4:	89 a1       	ldd	r24, Y+33	; 0x21
    20c6:	9a a1       	ldd	r25, Y+34	; 0x22
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	9a a3       	std	Y+34, r25	; 0x22
    20cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	89 a1       	ldd	r24, Y+33	; 0x21
    20d0:	9a a1       	ldd	r25, Y+34	; 0x22
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	69 f7       	brne	.-38     	; 0x20b0 <LCD_sendCommand+0x1ac>
    20d6:	14 c0       	rjmp	.+40     	; 0x2100 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d8:	6b a1       	ldd	r22, Y+35	; 0x23
    20da:	7c a1       	ldd	r23, Y+36	; 0x24
    20dc:	8d a1       	ldd	r24, Y+37	; 0x25
    20de:	9e a1       	ldd	r25, Y+38	; 0x26
    20e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9a a3       	std	Y+34, r25	; 0x22
    20ea:	89 a3       	std	Y+33, r24	; 0x21
    20ec:	89 a1       	ldd	r24, Y+33	; 0x21
    20ee:	9a a1       	ldd	r25, Y+34	; 0x22
    20f0:	9e 8f       	std	Y+30, r25	; 0x1e
    20f2:	8d 8f       	std	Y+29, r24	; 0x1d
    20f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_sendCommand+0x1f4>
    20fc:	9e 8f       	std	Y+30, r25	; 0x1e
    20fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	69 ad       	ldd	r22, Y+57	; 0x39
    2104:	0e 94 cc 09 	call	0x1398	; 0x1398 <GPIO_writePort>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	a0 e8       	ldi	r26, 0x80	; 128
    210e:	bf e3       	ldi	r27, 0x3F	; 63
    2110:	89 8f       	std	Y+25, r24	; 0x19
    2112:	9a 8f       	std	Y+26, r25	; 0x1a
    2114:	ab 8f       	std	Y+27, r26	; 0x1b
    2116:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2118:	69 8d       	ldd	r22, Y+25	; 0x19
    211a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a ef       	ldi	r20, 0xFA	; 250
    2126:	54 e4       	ldi	r21, 0x44	; 68
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8d 8b       	std	Y+21, r24	; 0x15
    2132:	9e 8b       	std	Y+22, r25	; 0x16
    2134:	af 8b       	std	Y+23, r26	; 0x17
    2136:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2138:	6d 89       	ldd	r22, Y+21	; 0x15
    213a:	7e 89       	ldd	r23, Y+22	; 0x16
    213c:	8f 89       	ldd	r24, Y+23	; 0x17
    213e:	98 8d       	ldd	r25, Y+24	; 0x18
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e8       	ldi	r20, 0x80	; 128
    2146:	5f e3       	ldi	r21, 0x3F	; 63
    2148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    214c:	88 23       	and	r24, r24
    214e:	2c f4       	brge	.+10     	; 0x215a <LCD_sendCommand+0x256>
		__ticks = 1;
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9c 8b       	std	Y+20, r25	; 0x14
    2156:	8b 8b       	std	Y+19, r24	; 0x13
    2158:	3f c0       	rjmp	.+126    	; 0x21d8 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    215a:	6d 89       	ldd	r22, Y+21	; 0x15
    215c:	7e 89       	ldd	r23, Y+22	; 0x16
    215e:	8f 89       	ldd	r24, Y+23	; 0x17
    2160:	98 8d       	ldd	r25, Y+24	; 0x18
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	3f ef       	ldi	r19, 0xFF	; 255
    2166:	4f e7       	ldi	r20, 0x7F	; 127
    2168:	57 e4       	ldi	r21, 0x47	; 71
    216a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216e:	18 16       	cp	r1, r24
    2170:	4c f5       	brge	.+82     	; 0x21c4 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2172:	69 8d       	ldd	r22, Y+25	; 0x19
    2174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e2       	ldi	r20, 0x20	; 32
    2180:	51 e4       	ldi	r21, 0x41	; 65
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9c 8b       	std	Y+20, r25	; 0x14
    2198:	8b 8b       	std	Y+19, r24	; 0x13
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <LCD_sendCommand+0x2b6>
    219c:	88 ec       	ldi	r24, 0xC8	; 200
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9a 8b       	std	Y+18, r25	; 0x12
    21a2:	89 8b       	std	Y+17, r24	; 0x11
    21a4:	89 89       	ldd	r24, Y+17	; 0x11
    21a6:	9a 89       	ldd	r25, Y+18	; 0x12
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <LCD_sendCommand+0x2a4>
    21ac:	9a 8b       	std	Y+18, r25	; 0x12
    21ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b0:	8b 89       	ldd	r24, Y+19	; 0x13
    21b2:	9c 89       	ldd	r25, Y+20	; 0x14
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	9c 8b       	std	Y+20, r25	; 0x14
    21b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	69 f7       	brne	.-38     	; 0x219c <LCD_sendCommand+0x298>
    21c2:	14 c0       	rjmp	.+40     	; 0x21ec <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c4:	6d 89       	ldd	r22, Y+21	; 0x15
    21c6:	7e 89       	ldd	r23, Y+22	; 0x16
    21c8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ca:	98 8d       	ldd	r25, Y+24	; 0x18
    21cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
    21d8:	8b 89       	ldd	r24, Y+19	; 0x13
    21da:	9c 89       	ldd	r25, Y+20	; 0x14
    21dc:	98 8b       	std	Y+16, r25	; 0x10
    21de:	8f 87       	std	Y+15, r24	; 0x0f
    21e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e2:	98 89       	ldd	r25, Y+16	; 0x10
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <LCD_sendCommand+0x2e0>
    21e8:	98 8b       	std	Y+16, r25	; 0x10
    21ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	62 e0       	ldi	r22, 0x02	; 2
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	a0 e8       	ldi	r26, 0x80	; 128
    21fc:	bf e3       	ldi	r27, 0x3F	; 63
    21fe:	8b 87       	std	Y+11, r24	; 0x0b
    2200:	9c 87       	std	Y+12, r25	; 0x0c
    2202:	ad 87       	std	Y+13, r26	; 0x0d
    2204:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2206:	6b 85       	ldd	r22, Y+11	; 0x0b
    2208:	7c 85       	ldd	r23, Y+12	; 0x0c
    220a:	8d 85       	ldd	r24, Y+13	; 0x0d
    220c:	9e 85       	ldd	r25, Y+14	; 0x0e
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a ef       	ldi	r20, 0xFA	; 250
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8f 83       	std	Y+7, r24	; 0x07
    2220:	98 87       	std	Y+8, r25	; 0x08
    2222:	a9 87       	std	Y+9, r26	; 0x09
    2224:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2226:	6f 81       	ldd	r22, Y+7	; 0x07
    2228:	78 85       	ldd	r23, Y+8	; 0x08
    222a:	89 85       	ldd	r24, Y+9	; 0x09
    222c:	9a 85       	ldd	r25, Y+10	; 0x0a
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e8       	ldi	r20, 0x80	; 128
    2234:	5f e3       	ldi	r21, 0x3F	; 63
    2236:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    223a:	88 23       	and	r24, r24
    223c:	2c f4       	brge	.+10     	; 0x2248 <LCD_sendCommand+0x344>
		__ticks = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
    2246:	3f c0       	rjmp	.+126    	; 0x22c6 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	3f ef       	ldi	r19, 0xFF	; 255
    2254:	4f e7       	ldi	r20, 0x7F	; 127
    2256:	57 e4       	ldi	r21, 0x47	; 71
    2258:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225c:	18 16       	cp	r1, r24
    225e:	4c f5       	brge	.+82     	; 0x22b2 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2260:	6b 85       	ldd	r22, Y+11	; 0x0b
    2262:	7c 85       	ldd	r23, Y+12	; 0x0c
    2264:	8d 85       	ldd	r24, Y+13	; 0x0d
    2266:	9e 85       	ldd	r25, Y+14	; 0x0e
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e2       	ldi	r20, 0x20	; 32
    226e:	51 e4       	ldi	r21, 0x41	; 65
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <LCD_sendCommand+0x3a4>
    228a:	88 ec       	ldi	r24, 0xC8	; 200
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9c 83       	std	Y+4, r25	; 0x04
    2290:	8b 83       	std	Y+3, r24	; 0x03
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <LCD_sendCommand+0x392>
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	9e 83       	std	Y+6, r25	; 0x06
    22a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	69 f7       	brne	.-38     	; 0x228a <LCD_sendCommand+0x386>
    22b0:	14 c0       	rjmp	.+40     	; 0x22da <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b2:	6f 81       	ldd	r22, Y+7	; 0x07
    22b4:	78 85       	ldd	r23, Y+8	; 0x08
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	9a 83       	std	Y+2, r25	; 0x02
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	9a 81       	ldd	r25, Y+2	; 0x02
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <LCD_sendCommand+0x3ce>
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    22da:	e9 96       	adiw	r28, 0x39	; 57
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	e9 97       	sbiw	r28, 0x39	; 57
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* Instruction Mode RW=0 */
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	61 e0       	ldi	r22, 0x01	; 1
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	41 e0       	ldi	r20, 0x01	; 1
    2312:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a0 e8       	ldi	r26, 0x80	; 128
    231c:	bf e3       	ldi	r27, 0x3F	; 63
    231e:	8d ab       	std	Y+53, r24	; 0x35
    2320:	9e ab       	std	Y+54, r25	; 0x36
    2322:	af ab       	std	Y+55, r26	; 0x37
    2324:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	6d a9       	ldd	r22, Y+53	; 0x35
    2328:	7e a9       	ldd	r23, Y+54	; 0x36
    232a:	8f a9       	ldd	r24, Y+55	; 0x37
    232c:	98 ad       	ldd	r25, Y+56	; 0x38
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a ef       	ldi	r20, 0xFA	; 250
    2334:	54 e4       	ldi	r21, 0x44	; 68
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	89 ab       	std	Y+49, r24	; 0x31
    2340:	9a ab       	std	Y+50, r25	; 0x32
    2342:	ab ab       	std	Y+51, r26	; 0x33
    2344:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2346:	69 a9       	ldd	r22, Y+49	; 0x31
    2348:	7a a9       	ldd	r23, Y+50	; 0x32
    234a:	8b a9       	ldd	r24, Y+51	; 0x33
    234c:	9c a9       	ldd	r25, Y+52	; 0x34
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	98 ab       	std	Y+48, r25	; 0x30
    2364:	8f a7       	std	Y+47, r24	; 0x2f
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2368:	69 a9       	ldd	r22, Y+49	; 0x31
    236a:	7a a9       	ldd	r23, Y+50	; 0x32
    236c:	8b a9       	ldd	r24, Y+51	; 0x33
    236e:	9c a9       	ldd	r25, Y+52	; 0x34
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	4c f5       	brge	.+82     	; 0x23d2 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	6d a9       	ldd	r22, Y+53	; 0x35
    2382:	7e a9       	ldd	r23, Y+54	; 0x36
    2384:	8f a9       	ldd	r24, Y+55	; 0x37
    2386:	98 ad       	ldd	r25, Y+56	; 0x38
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	98 ab       	std	Y+48, r25	; 0x30
    23a6:	8f a7       	std	Y+47, r24	; 0x2f
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <LCD_displayCharacter+0xdc>
    23aa:	88 ec       	ldi	r24, 0xC8	; 200
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9e a7       	std	Y+46, r25	; 0x2e
    23b0:	8d a7       	std	Y+45, r24	; 0x2d
    23b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    23b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <LCD_displayCharacter+0xca>
    23ba:	9e a7       	std	Y+46, r25	; 0x2e
    23bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c0:	98 a9       	ldd	r25, Y+48	; 0x30
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	98 ab       	std	Y+48, r25	; 0x30
    23c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ca:	98 a9       	ldd	r25, Y+48	; 0x30
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f7       	brne	.-38     	; 0x23aa <LCD_displayCharacter+0xbe>
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	69 a9       	ldd	r22, Y+49	; 0x31
    23d4:	7a a9       	ldd	r23, Y+50	; 0x32
    23d6:	8b a9       	ldd	r24, Y+51	; 0x33
    23d8:	9c a9       	ldd	r25, Y+52	; 0x34
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	98 ab       	std	Y+48, r25	; 0x30
    23e4:	8f a7       	std	Y+47, r24	; 0x2f
    23e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ea:	9c a7       	std	Y+44, r25	; 0x2c
    23ec:	8b a7       	std	Y+43, r24	; 0x2b
    23ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_displayCharacter+0x106>
    23f6:	9c a7       	std	Y+44, r25	; 0x2c
    23f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	62 e0       	ldi	r22, 0x02	; 2
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a0 e8       	ldi	r26, 0x80	; 128
    240a:	bf e3       	ldi	r27, 0x3F	; 63
    240c:	8f a3       	std	Y+39, r24	; 0x27
    240e:	98 a7       	std	Y+40, r25	; 0x28
    2410:	a9 a7       	std	Y+41, r26	; 0x29
    2412:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	6f a1       	ldd	r22, Y+39	; 0x27
    2416:	78 a5       	ldd	r23, Y+40	; 0x28
    2418:	89 a5       	ldd	r24, Y+41	; 0x29
    241a:	9a a5       	ldd	r25, Y+42	; 0x2a
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a ef       	ldi	r20, 0xFA	; 250
    2422:	54 e4       	ldi	r21, 0x44	; 68
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8b a3       	std	Y+35, r24	; 0x23
    242e:	9c a3       	std	Y+36, r25	; 0x24
    2430:	ad a3       	std	Y+37, r26	; 0x25
    2432:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2434:	6b a1       	ldd	r22, Y+35	; 0x23
    2436:	7c a1       	ldd	r23, Y+36	; 0x24
    2438:	8d a1       	ldd	r24, Y+37	; 0x25
    243a:	9e a1       	ldd	r25, Y+38	; 0x26
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	2c f4       	brge	.+10     	; 0x2456 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9a a3       	std	Y+34, r25	; 0x22
    2452:	89 a3       	std	Y+33, r24	; 0x21
    2454:	3f c0       	rjmp	.+126    	; 0x24d4 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2456:	6b a1       	ldd	r22, Y+35	; 0x23
    2458:	7c a1       	ldd	r23, Y+36	; 0x24
    245a:	8d a1       	ldd	r24, Y+37	; 0x25
    245c:	9e a1       	ldd	r25, Y+38	; 0x26
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	3f ef       	ldi	r19, 0xFF	; 255
    2462:	4f e7       	ldi	r20, 0x7F	; 127
    2464:	57 e4       	ldi	r21, 0x47	; 71
    2466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    246a:	18 16       	cp	r1, r24
    246c:	4c f5       	brge	.+82     	; 0x24c0 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246e:	6f a1       	ldd	r22, Y+39	; 0x27
    2470:	78 a5       	ldd	r23, Y+40	; 0x28
    2472:	89 a5       	ldd	r24, Y+41	; 0x29
    2474:	9a a5       	ldd	r25, Y+42	; 0x2a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e2       	ldi	r20, 0x20	; 32
    247c:	51 e4       	ldi	r21, 0x41	; 65
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9a a3       	std	Y+34, r25	; 0x22
    2494:	89 a3       	std	Y+33, r24	; 0x21
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <LCD_displayCharacter+0x1ca>
    2498:	88 ec       	ldi	r24, 0xC8	; 200
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	98 a3       	std	Y+32, r25	; 0x20
    249e:	8f 8f       	std	Y+31, r24	; 0x1f
    24a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24a2:	98 a1       	ldd	r25, Y+32	; 0x20
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <LCD_displayCharacter+0x1b8>
    24a8:	98 a3       	std	Y+32, r25	; 0x20
    24aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ac:	89 a1       	ldd	r24, Y+33	; 0x21
    24ae:	9a a1       	ldd	r25, Y+34	; 0x22
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	9a a3       	std	Y+34, r25	; 0x22
    24b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b6:	89 a1       	ldd	r24, Y+33	; 0x21
    24b8:	9a a1       	ldd	r25, Y+34	; 0x22
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	69 f7       	brne	.-38     	; 0x2498 <LCD_displayCharacter+0x1ac>
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c0:	6b a1       	ldd	r22, Y+35	; 0x23
    24c2:	7c a1       	ldd	r23, Y+36	; 0x24
    24c4:	8d a1       	ldd	r24, Y+37	; 0x25
    24c6:	9e a1       	ldd	r25, Y+38	; 0x26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9a a3       	std	Y+34, r25	; 0x22
    24d2:	89 a3       	std	Y+33, r24	; 0x21
    24d4:	89 a1       	ldd	r24, Y+33	; 0x21
    24d6:	9a a1       	ldd	r25, Y+34	; 0x22
    24d8:	9e 8f       	std	Y+30, r25	; 0x1e
    24da:	8d 8f       	std	Y+29, r24	; 0x1d
    24dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <LCD_displayCharacter+0x1f4>
    24e4:	9e 8f       	std	Y+30, r25	; 0x1e
    24e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	69 ad       	ldd	r22, Y+57	; 0x39
    24ec:	0e 94 cc 09 	call	0x1398	; 0x1398 <GPIO_writePort>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	a0 e8       	ldi	r26, 0x80	; 128
    24f6:	bf e3       	ldi	r27, 0x3F	; 63
    24f8:	89 8f       	std	Y+25, r24	; 0x19
    24fa:	9a 8f       	std	Y+26, r25	; 0x1a
    24fc:	ab 8f       	std	Y+27, r26	; 0x1b
    24fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2500:	69 8d       	ldd	r22, Y+25	; 0x19
    2502:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	4a ef       	ldi	r20, 0xFA	; 250
    250e:	54 e4       	ldi	r21, 0x44	; 68
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8d 8b       	std	Y+21, r24	; 0x15
    251a:	9e 8b       	std	Y+22, r25	; 0x16
    251c:	af 8b       	std	Y+23, r26	; 0x17
    251e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2520:	6d 89       	ldd	r22, Y+21	; 0x15
    2522:	7e 89       	ldd	r23, Y+22	; 0x16
    2524:	8f 89       	ldd	r24, Y+23	; 0x17
    2526:	98 8d       	ldd	r25, Y+24	; 0x18
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e8       	ldi	r20, 0x80	; 128
    252e:	5f e3       	ldi	r21, 0x3F	; 63
    2530:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2534:	88 23       	and	r24, r24
    2536:	2c f4       	brge	.+10     	; 0x2542 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9c 8b       	std	Y+20, r25	; 0x14
    253e:	8b 8b       	std	Y+19, r24	; 0x13
    2540:	3f c0       	rjmp	.+126    	; 0x25c0 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2542:	6d 89       	ldd	r22, Y+21	; 0x15
    2544:	7e 89       	ldd	r23, Y+22	; 0x16
    2546:	8f 89       	ldd	r24, Y+23	; 0x17
    2548:	98 8d       	ldd	r25, Y+24	; 0x18
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	3f ef       	ldi	r19, 0xFF	; 255
    254e:	4f e7       	ldi	r20, 0x7F	; 127
    2550:	57 e4       	ldi	r21, 0x47	; 71
    2552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2556:	18 16       	cp	r1, r24
    2558:	4c f5       	brge	.+82     	; 0x25ac <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255a:	69 8d       	ldd	r22, Y+25	; 0x19
    255c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    255e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9c 8b       	std	Y+20, r25	; 0x14
    2580:	8b 8b       	std	Y+19, r24	; 0x13
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <LCD_displayCharacter+0x2b6>
    2584:	88 ec       	ldi	r24, 0xC8	; 200
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9a 8b       	std	Y+18, r25	; 0x12
    258a:	89 8b       	std	Y+17, r24	; 0x11
    258c:	89 89       	ldd	r24, Y+17	; 0x11
    258e:	9a 89       	ldd	r25, Y+18	; 0x12
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_displayCharacter+0x2a4>
    2594:	9a 8b       	std	Y+18, r25	; 0x12
    2596:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2598:	8b 89       	ldd	r24, Y+19	; 0x13
    259a:	9c 89       	ldd	r25, Y+20	; 0x14
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	9c 8b       	std	Y+20, r25	; 0x14
    25a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a2:	8b 89       	ldd	r24, Y+19	; 0x13
    25a4:	9c 89       	ldd	r25, Y+20	; 0x14
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	69 f7       	brne	.-38     	; 0x2584 <LCD_displayCharacter+0x298>
    25aa:	14 c0       	rjmp	.+40     	; 0x25d4 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ac:	6d 89       	ldd	r22, Y+21	; 0x15
    25ae:	7e 89       	ldd	r23, Y+22	; 0x16
    25b0:	8f 89       	ldd	r24, Y+23	; 0x17
    25b2:	98 8d       	ldd	r25, Y+24	; 0x18
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9c 8b       	std	Y+20, r25	; 0x14
    25be:	8b 8b       	std	Y+19, r24	; 0x13
    25c0:	8b 89       	ldd	r24, Y+19	; 0x13
    25c2:	9c 89       	ldd	r25, Y+20	; 0x14
    25c4:	98 8b       	std	Y+16, r25	; 0x10
    25c6:	8f 87       	std	Y+15, r24	; 0x0f
    25c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ca:	98 89       	ldd	r25, Y+16	; 0x10
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_displayCharacter+0x2e0>
    25d0:	98 8b       	std	Y+16, r25	; 0x10
    25d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	62 e0       	ldi	r22, 0x02	; 2
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e8       	ldi	r26, 0x80	; 128
    25e4:	bf e3       	ldi	r27, 0x3F	; 63
    25e6:	8b 87       	std	Y+11, r24	; 0x0b
    25e8:	9c 87       	std	Y+12, r25	; 0x0c
    25ea:	ad 87       	std	Y+13, r26	; 0x0d
    25ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a ef       	ldi	r20, 0xFA	; 250
    25fc:	54 e4       	ldi	r21, 0x44	; 68
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	8f 83       	std	Y+7, r24	; 0x07
    2608:	98 87       	std	Y+8, r25	; 0x08
    260a:	a9 87       	std	Y+9, r26	; 0x09
    260c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    260e:	6f 81       	ldd	r22, Y+7	; 0x07
    2610:	78 85       	ldd	r23, Y+8	; 0x08
    2612:	89 85       	ldd	r24, Y+9	; 0x09
    2614:	9a 85       	ldd	r25, Y+10	; 0x0a
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	3f c0       	rjmp	.+126    	; 0x26ae <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2630:	6f 81       	ldd	r22, Y+7	; 0x07
    2632:	78 85       	ldd	r23, Y+8	; 0x08
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	9a 85       	ldd	r25, Y+10	; 0x0a
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	4c f5       	brge	.+82     	; 0x269a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	6b 85       	ldd	r22, Y+11	; 0x0b
    264a:	7c 85       	ldd	r23, Y+12	; 0x0c
    264c:	8d 85       	ldd	r24, Y+13	; 0x0d
    264e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <LCD_displayCharacter+0x3a4>
    2672:	88 ec       	ldi	r24, 0xC8	; 200
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9c 83       	std	Y+4, r25	; 0x04
    2678:	8b 83       	std	Y+3, r24	; 0x03
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <LCD_displayCharacter+0x392>
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	8d 81       	ldd	r24, Y+5	; 0x05
    2692:	9e 81       	ldd	r25, Y+6	; 0x06
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f7       	brne	.-38     	; 0x2672 <LCD_displayCharacter+0x386>
    2698:	14 c0       	rjmp	.+40     	; 0x26c2 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9e 83       	std	Y+6, r25	; 0x06
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	89 83       	std	Y+1, r24	; 0x01
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_displayCharacter+0x3ce>
    26be:	9a 83       	std	Y+2, r25	; 0x02
    26c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    26c2:	e9 96       	adiw	r28, 0x39	; 57
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	00 d0       	rcall	.+0      	; 0x26da <LCD_displayString+0x6>
    26da:	0f 92       	push	r0
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	9b 83       	std	Y+3, r25	; 0x03
    26e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26e4:	19 82       	std	Y+1, r1	; 0x01
    26e6:	0e c0       	rjmp	.+28     	; 0x2704 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	8a 81       	ldd	r24, Y+2	; 0x02
    26f0:	9b 81       	ldd	r25, Y+3	; 0x03
    26f2:	fc 01       	movw	r30, r24
    26f4:	e2 0f       	add	r30, r18
    26f6:	f3 1f       	adc	r31, r19
    26f8:	80 81       	ld	r24, Z
    26fa:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_displayCharacter>
		i++;
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	8f 5f       	subi	r24, 0xFF	; 255
    2702:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	fc 01       	movw	r30, r24
    2710:	e2 0f       	add	r30, r18
    2712:	f3 1f       	adc	r31, r19
    2714:	80 81       	ld	r24, Z
    2716:	88 23       	and	r24, r24
    2718:	39 f7       	brne	.-50     	; 0x26e8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	00 d0       	rcall	.+0      	; 0x272c <LCD_moveCursor+0x6>
    272c:	00 d0       	rcall	.+0      	; 0x272e <LCD_moveCursor+0x8>
    272e:	0f 92       	push	r0
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	8a 83       	std	Y+2, r24	; 0x02
    2736:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	3d 83       	std	Y+5, r19	; 0x05
    2740:	2c 83       	std	Y+4, r18	; 0x04
    2742:	8c 81       	ldd	r24, Y+4	; 0x04
    2744:	9d 81       	ldd	r25, Y+5	; 0x05
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	91 05       	cpc	r25, r1
    274a:	c1 f0       	breq	.+48     	; 0x277c <LCD_moveCursor+0x56>
    274c:	2c 81       	ldd	r18, Y+4	; 0x04
    274e:	3d 81       	ldd	r19, Y+5	; 0x05
    2750:	22 30       	cpi	r18, 0x02	; 2
    2752:	31 05       	cpc	r19, r1
    2754:	2c f4       	brge	.+10     	; 0x2760 <LCD_moveCursor+0x3a>
    2756:	8c 81       	ldd	r24, Y+4	; 0x04
    2758:	9d 81       	ldd	r25, Y+5	; 0x05
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	61 f0       	breq	.+24     	; 0x2776 <LCD_moveCursor+0x50>
    275e:	19 c0       	rjmp	.+50     	; 0x2792 <LCD_moveCursor+0x6c>
    2760:	2c 81       	ldd	r18, Y+4	; 0x04
    2762:	3d 81       	ldd	r19, Y+5	; 0x05
    2764:	22 30       	cpi	r18, 0x02	; 2
    2766:	31 05       	cpc	r19, r1
    2768:	69 f0       	breq	.+26     	; 0x2784 <LCD_moveCursor+0x5e>
    276a:	8c 81       	ldd	r24, Y+4	; 0x04
    276c:	9d 81       	ldd	r25, Y+5	; 0x05
    276e:	83 30       	cpi	r24, 0x03	; 3
    2770:	91 05       	cpc	r25, r1
    2772:	61 f0       	breq	.+24     	; 0x278c <LCD_moveCursor+0x66>
    2774:	0e c0       	rjmp	.+28     	; 0x2792 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	0b c0       	rjmp	.+22     	; 0x2792 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	80 5c       	subi	r24, 0xC0	; 192
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	07 c0       	rjmp	.+14     	; 0x2792 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	80 5f       	subi	r24, 0xF0	; 240
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	03 c0       	rjmp	.+6      	; 0x2792 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	80 5b       	subi	r24, 0xB0	; 176
    2790:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	80 68       	ori	r24, 0x80	; 128
    2796:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <LCD_sendCommand>
}
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_displayStringRowColumn+0x6>
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <LCD_displayStringRowColumn+0x8>
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	6a 83       	std	Y+2, r22	; 0x02
    27ba:	5c 83       	std	Y+4, r21	; 0x04
    27bc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	6a 81       	ldd	r22, Y+2	; 0x02
    27c2:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_displayString>
}
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	62 97       	sbiw	r28, 0x12	; 18
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	9a 8b       	std	Y+18, r25	; 0x12
    27f2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    27f4:	89 89       	ldd	r24, Y+17	; 0x11
    27f6:	9a 89       	ldd	r25, Y+18	; 0x12
    27f8:	9e 01       	movw	r18, r28
    27fa:	2f 5f       	subi	r18, 0xFF	; 255
    27fc:	3f 4f       	sbci	r19, 0xFF	; 255
    27fe:	b9 01       	movw	r22, r18
    2800:	4a e0       	ldi	r20, 0x0A	; 10
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	0e 94 9f 18 	call	0x313e	; 0x313e <itoa>
   LCD_displayString(buff); /* Display the string */
    2808:	ce 01       	movw	r24, r28
    280a:	01 96       	adiw	r24, 0x01	; 1
    280c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_displayString>
}
    2810:	62 96       	adiw	r28, 0x12	; 18
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <LCD_sendCommand>
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <ServoMotor_Init>:
 * Initialize the Servo Motor by:
 * 1. Setup the timer1 for motor.
 * 2. Stop the motor at the beginning
 */
void ServoMotor_Init(void)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	2d 97       	sbiw	r28, 0x0d	; 13
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    284a:	83 e0       	ldi	r24, 0x03	; 3
    284c:	65 e0       	ldi	r22, 0x05	; 5
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	Timer1_ConfigType timer1_config_ptr={0,750 ,19999,F_CPU_8_TIMER1,FAST_PWM_ICR1};
    2854:	ce 01       	movw	r24, r28
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	9a 87       	std	Y+10, r25	; 0x0a
    285a:	89 87       	std	Y+9, r24	; 0x09
    285c:	e8 e6       	ldi	r30, 0x68	; 104
    285e:	f1 e0       	ldi	r31, 0x01	; 1
    2860:	fc 87       	std	Y+12, r31	; 0x0c
    2862:	eb 87       	std	Y+11, r30	; 0x0b
    2864:	f8 e0       	ldi	r31, 0x08	; 8
    2866:	fd 87       	std	Y+13, r31	; 0x0d
    2868:	eb 85       	ldd	r30, Y+11	; 0x0b
    286a:	fc 85       	ldd	r31, Y+12	; 0x0c
    286c:	00 80       	ld	r0, Z
    286e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2870:	9c 85       	ldd	r25, Y+12	; 0x0c
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	9c 87       	std	Y+12, r25	; 0x0c
    2876:	8b 87       	std	Y+11, r24	; 0x0b
    2878:	e9 85       	ldd	r30, Y+9	; 0x09
    287a:	fa 85       	ldd	r31, Y+10	; 0x0a
    287c:	00 82       	st	Z, r0
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	9a 87       	std	Y+10, r25	; 0x0a
    2886:	89 87       	std	Y+9, r24	; 0x09
    2888:	9d 85       	ldd	r25, Y+13	; 0x0d
    288a:	91 50       	subi	r25, 0x01	; 1
    288c:	9d 87       	std	Y+13, r25	; 0x0d
    288e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2890:	ee 23       	and	r30, r30
    2892:	51 f7       	brne	.-44     	; 0x2868 <ServoMotor_Init+0x32>
	/* Setup the two motor pins as output pins */
	Timer1_init(&timer1_config_ptr);
    2894:	ce 01       	movw	r24, r28
    2896:	01 96       	adiw	r24, 0x01	; 1
    2898:	0e 94 9e 0c 	call	0x193c	; 0x193c <Timer1_init>

}
    289c:	2d 96       	adiw	r28, 0x0d	; 13
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <SERVO_set_angle>:


void SERVO_set_angle(uint8 angle)
{
    28ae:	af 92       	push	r10
    28b0:	bf 92       	push	r11
    28b2:	cf 92       	push	r12
    28b4:	df 92       	push	r13
    28b6:	ef 92       	push	r14
    28b8:	ff 92       	push	r15
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <SERVO_set_angle+0x16>
    28c4:	0f 92       	push	r0
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	8b 83       	std	Y+3, r24	; 0x03
	uint16 U = Map(0 , 180 ,750 ,2500 , angle);
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	88 2f       	mov	r24, r24
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a0 e0       	ldi	r26, 0x00	; 0
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <SERVO_set_angle+0x2a>
    28d8:	00 d0       	rcall	.+0      	; 0x28da <SERVO_set_angle+0x2c>
    28da:	ed b7       	in	r30, 0x3d	; 61
    28dc:	fe b7       	in	r31, 0x3e	; 62
    28de:	31 96       	adiw	r30, 0x01	; 1
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	24 eb       	ldi	r18, 0xB4	; 180
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e0       	ldi	r20, 0x00	; 0
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	0f 2e       	mov	r0, r31
    28fa:	fe ee       	ldi	r31, 0xEE	; 238
    28fc:	ef 2e       	mov	r14, r31
    28fe:	f2 e0       	ldi	r31, 0x02	; 2
    2900:	ff 2e       	mov	r15, r31
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	0f 2f       	mov	r16, r31
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	1f 2f       	mov	r17, r31
    290a:	f0 2d       	mov	r31, r0
    290c:	0f 2e       	mov	r0, r31
    290e:	f4 ec       	ldi	r31, 0xC4	; 196
    2910:	af 2e       	mov	r10, r31
    2912:	f9 e0       	ldi	r31, 0x09	; 9
    2914:	bf 2e       	mov	r11, r31
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	cf 2e       	mov	r12, r31
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	df 2e       	mov	r13, r31
    291e:	f0 2d       	mov	r31, r0
    2920:	0e 94 aa 14 	call	0x2954	; 0x2954 <Map>
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_set_OCR1A(U);
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TIMER1_set_OCR1A>
}
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	ff 90       	pop	r15
    2948:	ef 90       	pop	r14
    294a:	df 90       	pop	r13
    294c:	cf 90       	pop	r12
    294e:	bf 90       	pop	r11
    2950:	af 90       	pop	r10
    2952:	08 95       	ret

00002954 <Map>:

uint16 Map(sint32 Copy_sint32InputMin , sint32 Copy_sint32InputMax , sint32 Copy_sint32OutputMin , sint32 Copy_sint32OutputMax , sint32 Copy_sint32InputVal)
{
    2954:	af 92       	push	r10
    2956:	bf 92       	push	r11
    2958:	cf 92       	push	r12
    295a:	df 92       	push	r13
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	64 97       	sbiw	r28, 0x14	; 20
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	de bf       	out	0x3e, r29	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	cd bf       	out	0x3d, r28	; 61
    2978:	6d 83       	std	Y+5, r22	; 0x05
    297a:	7e 83       	std	Y+6, r23	; 0x06
    297c:	8f 83       	std	Y+7, r24	; 0x07
    297e:	98 87       	std	Y+8, r25	; 0x08
    2980:	29 87       	std	Y+9, r18	; 0x09
    2982:	3a 87       	std	Y+10, r19	; 0x0a
    2984:	4b 87       	std	Y+11, r20	; 0x0b
    2986:	5c 87       	std	Y+12, r21	; 0x0c
    2988:	ed 86       	std	Y+13, r14	; 0x0d
    298a:	fe 86       	std	Y+14, r15	; 0x0e
    298c:	0f 87       	std	Y+15, r16	; 0x0f
    298e:	18 8b       	std	Y+16, r17	; 0x10
    2990:	a9 8a       	std	Y+17, r10	; 0x11
    2992:	ba 8a       	std	Y+18, r11	; 0x12
    2994:	cb 8a       	std	Y+19, r12	; 0x13
    2996:	dc 8a       	std	Y+20, r13	; 0x14
	sint32 Loacl_sint32Value = Copy_sint32InputVal - Copy_sint32InputMin;
    2998:	29 a1       	ldd	r18, Y+33	; 0x21
    299a:	3a a1       	ldd	r19, Y+34	; 0x22
    299c:	4b a1       	ldd	r20, Y+35	; 0x23
    299e:	5c a1       	ldd	r21, Y+36	; 0x24
    29a0:	8d 81       	ldd	r24, Y+5	; 0x05
    29a2:	9e 81       	ldd	r25, Y+6	; 0x06
    29a4:	af 81       	ldd	r26, Y+7	; 0x07
    29a6:	b8 85       	ldd	r27, Y+8	; 0x08
    29a8:	79 01       	movw	r14, r18
    29aa:	8a 01       	movw	r16, r20
    29ac:	e8 1a       	sub	r14, r24
    29ae:	f9 0a       	sbc	r15, r25
    29b0:	0a 0b       	sbc	r16, r26
    29b2:	1b 0b       	sbc	r17, r27
    29b4:	d8 01       	movw	r26, r16
    29b6:	c7 01       	movw	r24, r14
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	ab 83       	std	Y+3, r26	; 0x03
    29be:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_sint32Value = Loacl_sint32Value * (Copy_sint32OutputMax - Copy_sint32OutputMin);
    29c0:	29 89       	ldd	r18, Y+17	; 0x11
    29c2:	3a 89       	ldd	r19, Y+18	; 0x12
    29c4:	4b 89       	ldd	r20, Y+19	; 0x13
    29c6:	5c 89       	ldd	r21, Y+20	; 0x14
    29c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    29cc:	af 85       	ldd	r26, Y+15	; 0x0f
    29ce:	b8 89       	ldd	r27, Y+16	; 0x10
    29d0:	28 1b       	sub	r18, r24
    29d2:	39 0b       	sbc	r19, r25
    29d4:	4a 0b       	sbc	r20, r26
    29d6:	5b 0b       	sbc	r21, r27
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	ab 81       	ldd	r26, Y+3	; 0x03
    29de:	bc 81       	ldd	r27, Y+4	; 0x04
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__mulsi3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	ab 83       	std	Y+3, r26	; 0x03
    29f2:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_sint32Value = Loacl_sint32Value / (Copy_sint32InputMax - Copy_sint32InputMin);
    29f4:	29 85       	ldd	r18, Y+9	; 0x09
    29f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    29f8:	4b 85       	ldd	r20, Y+11	; 0x0b
    29fa:	5c 85       	ldd	r21, Y+12	; 0x0c
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2a00:	af 81       	ldd	r26, Y+7	; 0x07
    2a02:	b8 85       	ldd	r27, Y+8	; 0x08
    2a04:	28 1b       	sub	r18, r24
    2a06:	39 0b       	sbc	r19, r25
    2a08:	4a 0b       	sbc	r20, r26
    2a0a:	5b 0b       	sbc	r21, r27
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	ab 81       	ldd	r26, Y+3	; 0x03
    2a12:	bc 81       	ldd	r27, Y+4	; 0x04
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 4d 18 	call	0x309a	; 0x309a <__divmodsi4>
    2a1c:	da 01       	movw	r26, r20
    2a1e:	c9 01       	movw	r24, r18
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	ab 83       	std	Y+3, r26	; 0x03
    2a26:	bc 83       	std	Y+4, r27	; 0x04
	Loacl_sint32Value = Loacl_sint32Value + Copy_sint32OutputMin;
    2a28:	29 81       	ldd	r18, Y+1	; 0x01
    2a2a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a2c:	4b 81       	ldd	r20, Y+3	; 0x03
    2a2e:	5c 81       	ldd	r21, Y+4	; 0x04
    2a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a34:	af 85       	ldd	r26, Y+15	; 0x0f
    2a36:	b8 89       	ldd	r27, Y+16	; 0x10
    2a38:	82 0f       	add	r24, r18
    2a3a:	93 1f       	adc	r25, r19
    2a3c:	a4 1f       	adc	r26, r20
    2a3e:	b5 1f       	adc	r27, r21
    2a40:	89 83       	std	Y+1, r24	; 0x01
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	ab 83       	std	Y+3, r26	; 0x03
    2a46:	bc 83       	std	Y+4, r27	; 0x04
	return Loacl_sint32Value;
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a4c:	64 96       	adiw	r28, 0x14	; 20
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	df 90       	pop	r13
    2a66:	cf 90       	pop	r12
    2a68:	bf 90       	pop	r11
    2a6a:	af 90       	pop	r10
    2a6c:	08 95       	ret

00002a6e <Ultrasonic_init>:
/*
 * Set Triggre pin output
 * Initialize timer0 and interrupt0 and set callback functions
 */
void Ultrasonic_init(void)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, PIN_OUTPUT);
    2a76:	82 e0       	ldi	r24, 0x02	; 2
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	41 e0       	ldi	r20, 0x01	; 1
    2a7c:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>

	Timer0_Ovf_Start();
    2a80:	0e 94 0e 0c 	call	0x181c	; 0x181c <Timer0_Ovf_Start>
	Timer0_setCallBack(Ultrasonic_edgeProcessing);/* To count the time that taken to send and receive signal  */
    2a84:	81 e8       	ldi	r24, 0x81	; 129
    2a86:	96 e1       	ldi	r25, 0x16	; 22
    2a88:	0e 94 26 0c 	call	0x184c	; 0x184c <Timer0_setCallBack>


	INT0_init();
    2a8c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <INT0_init>
	INT0_setCallBack(Ultrasonic_detectedge);/* To detect ECHO signal */
    2a90:	87 e4       	ldi	r24, 0x47	; 71
    2a92:	96 e1       	ldi	r25, 0x16	; 22
    2a94:	0e 94 86 0b 	call	0x170c	; 0x170c <INT0_setCallBack>

	SREG |=0x80; /* To use timer0 and interrupt0 ISR */
    2a98:	af e5       	ldi	r26, 0x5F	; 95
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	ef e5       	ldi	r30, 0x5F	; 95
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	80 68       	ori	r24, 0x80	; 128
    2aa4:	8c 93       	st	X, r24
}
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <Ultrasonic_Trigger>:

/*
 * Send signal for 10us
 */
void Ultrasonic_Trigger(void)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	68 97       	sbiw	r28, 0x18	; 24
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_HIGH);
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	60 e0       	ldi	r22, 0x00	; 0
    2ac4:	41 e0       	ldi	r20, 0x01	; 1
    2ac6:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	a0 e2       	ldi	r26, 0x20	; 32
    2ad0:	b1 e4       	ldi	r27, 0x41	; 65
    2ad2:	8d 8b       	std	Y+21, r24	; 0x15
    2ad4:	9e 8b       	std	Y+22, r25	; 0x16
    2ad6:	af 8b       	std	Y+23, r26	; 0x17
    2ad8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ada:	6d 89       	ldd	r22, Y+21	; 0x15
    2adc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ade:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae2:	2b ea       	ldi	r18, 0xAB	; 171
    2ae4:	3a ea       	ldi	r19, 0xAA	; 170
    2ae6:	4a e2       	ldi	r20, 0x2A	; 42
    2ae8:	50 e4       	ldi	r21, 0x40	; 64
    2aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	89 8b       	std	Y+17, r24	; 0x11
    2af4:	9a 8b       	std	Y+18, r25	; 0x12
    2af6:	ab 8b       	std	Y+19, r26	; 0x13
    2af8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2afa:	69 89       	ldd	r22, Y+17	; 0x11
    2afc:	7a 89       	ldd	r23, Y+18	; 0x12
    2afe:	8b 89       	ldd	r24, Y+19	; 0x13
    2b00:	9c 89       	ldd	r25, Y+20	; 0x14
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e8       	ldi	r20, 0x80	; 128
    2b08:	5f e3       	ldi	r21, 0x3F	; 63
    2b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b0e:	88 23       	and	r24, r24
    2b10:	1c f4       	brge	.+6      	; 0x2b18 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	88 8b       	std	Y+16, r24	; 0x10
    2b16:	91 c0       	rjmp	.+290    	; 0x2c3a <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    2b18:	69 89       	ldd	r22, Y+17	; 0x11
    2b1a:	7a 89       	ldd	r23, Y+18	; 0x12
    2b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	53 e4       	ldi	r21, 0x43	; 67
    2b28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	0c f0       	brlt	.+2      	; 0x2b32 <Ultrasonic_Trigger+0x86>
    2b30:	7b c0       	rjmp	.+246    	; 0x2c28 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2b32:	6d 89       	ldd	r22, Y+21	; 0x15
    2b34:	7e 89       	ldd	r23, Y+22	; 0x16
    2b36:	8f 89       	ldd	r24, Y+23	; 0x17
    2b38:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	4a e7       	ldi	r20, 0x7A	; 122
    2b40:	54 e4       	ldi	r21, 0x44	; 68
    2b42:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	8c 87       	std	Y+12, r24	; 0x0c
    2b4c:	9d 87       	std	Y+13, r25	; 0x0d
    2b4e:	ae 87       	std	Y+14, r26	; 0x0e
    2b50:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b54:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b56:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b58:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	88 87       	std	Y+8, r24	; 0x08
    2b6c:	99 87       	std	Y+9, r25	; 0x09
    2b6e:	aa 87       	std	Y+10, r26	; 0x0a
    2b70:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b72:	68 85       	ldd	r22, Y+8	; 0x08
    2b74:	79 85       	ldd	r23, Y+9	; 0x09
    2b76:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b78:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9f 83       	std	Y+7, r25	; 0x07
    2b90:	8e 83       	std	Y+6, r24	; 0x06
    2b92:	3f c0       	rjmp	.+126    	; 0x2c12 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    2b94:	68 85       	ldd	r22, Y+8	; 0x08
    2b96:	79 85       	ldd	r23, Y+9	; 0x09
    2b98:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	4c f5       	brge	.+82     	; 0x2bfe <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bae:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9f 83       	std	Y+7, r25	; 0x07
    2bd2:	8e 83       	std	Y+6, r24	; 0x06
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <Ultrasonic_Trigger+0x148>
    2bd6:	88 ec       	ldi	r24, 0xC8	; 200
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9d 83       	std	Y+5, r25	; 0x05
    2bdc:	8c 83       	std	Y+4, r24	; 0x04
    2bde:	8c 81       	ldd	r24, Y+4	; 0x04
    2be0:	9d 81       	ldd	r25, Y+5	; 0x05
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <Ultrasonic_Trigger+0x136>
    2be6:	9d 83       	std	Y+5, r25	; 0x05
    2be8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bea:	8e 81       	ldd	r24, Y+6	; 0x06
    2bec:	9f 81       	ldd	r25, Y+7	; 0x07
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	9f 83       	std	Y+7, r25	; 0x07
    2bf2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <Ultrasonic_Trigger+0x12a>
    2bfc:	24 c0       	rjmp	.+72     	; 0x2c46 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	68 85       	ldd	r22, Y+8	; 0x08
    2c00:	79 85       	ldd	r23, Y+9	; 0x09
    2c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9f 83       	std	Y+7, r25	; 0x07
    2c10:	8e 83       	std	Y+6, r24	; 0x06
    2c12:	8e 81       	ldd	r24, Y+6	; 0x06
    2c14:	9f 81       	ldd	r25, Y+7	; 0x07
    2c16:	9b 83       	std	Y+3, r25	; 0x03
    2c18:	8a 83       	std	Y+2, r24	; 0x02
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <Ultrasonic_Trigger+0x172>
    2c22:	9b 83       	std	Y+3, r25	; 0x03
    2c24:	8a 83       	std	Y+2, r24	; 0x02
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c28:	69 89       	ldd	r22, Y+17	; 0x11
    2c2a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	88 8b       	std	Y+16, r24	; 0x10
    2c3a:	88 89       	ldd	r24, Y+16	; 0x10
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	8a 95       	dec	r24
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <Ultrasonic_Trigger+0x194>
    2c44:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID, ULTRASONIC_TRIGGER_PIN_ID, LOGIC_LOW);
    2c46:	82 e0       	ldi	r24, 0x02	; 2
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
}
    2c50:	68 96       	adiw	r28, 0x18	; 24
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	08 95       	ret

00002c62 <Ultrasonic_readDistance>:
 * send distance by UART
 *return measured distance
 */

uint8 Ultrasonic_readDistance(void)
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
	if(g_sensor_start == 0)
    2c6a:	80 91 80 01 	lds	r24, 0x0180
    2c6e:	88 23       	and	r24, r24
    2c70:	29 f4       	brne	.+10     	; 0x2c7c <Ultrasonic_readDistance+0x1a>
	{
		Ultrasonic_Trigger();
    2c72:	0e 94 56 15 	call	0x2aac	; 0x2aac <Ultrasonic_Trigger>
		g_sensor_start=1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	80 93 80 01 	sts	0x0180, r24
	}
	UART_sendDecimal(g_distance);
    2c7c:	80 91 82 01 	lds	r24, 0x0182
    2c80:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <UART_sendDecimal>
	return g_distance;
    2c84:	80 91 82 01 	lds	r24, 0x0182
}
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <Ultrasonic_detectedge>:
/*
 * capture edge
 */

void Ultrasonic_detectedge(void)
{
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
	if(g_sensor_start==1)
    2c96:	80 91 80 01 	lds	r24, 0x0180
    2c9a:	81 30       	cpi	r24, 0x01	; 1
    2c9c:	79 f5       	brne	.+94     	; 0x2cfc <Ultrasonic_detectedge+0x6e>
	{
		/*
		 * start raising edge
		 * start the counter
		 */
		if(g_rising_edge==0)
    2c9e:	80 91 81 01 	lds	r24, 0x0181
    2ca2:	88 23       	and	r24, r24
    2ca4:	59 f4       	brne	.+22     	; 0x2cbc <Ultrasonic_detectedge+0x2e>
		{
			TCNT0=0;
    2ca6:	e2 e5       	ldi	r30, 0x52	; 82
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	10 82       	st	Z, r1
			g_rising_edge=1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	80 93 81 01 	sts	0x0181, r24
			g_timer_count=0;
    2cb2:	10 92 7f 01 	sts	0x017F, r1
    2cb6:	10 92 7e 01 	sts	0x017E, r1
    2cba:	20 c0       	rjmp	.+64     	; 0x2cfc <Ultrasonic_detectedge+0x6e>
			 * Distance = ( Timer Counter * 256 + ticks ) / 466.47
			 *
			 * ((g_timer_count*256)+ (TCNT0)) => completed overflow + remaining time
			 *
			 */
			g_distance=((uint16)(g_timer_count*256) + (TCNT0)) / (466);
    2cbc:	80 91 7e 01 	lds	r24, 0x017E
    2cc0:	90 91 7f 01 	lds	r25, 0x017F
    2cc4:	38 2f       	mov	r19, r24
    2cc6:	22 27       	eor	r18, r18
    2cc8:	e2 e5       	ldi	r30, 0x52	; 82
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	88 2f       	mov	r24, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	82 0f       	add	r24, r18
    2cd4:	93 1f       	adc	r25, r19
    2cd6:	22 ed       	ldi	r18, 0xD2	; 210
    2cd8:	31 e0       	ldi	r19, 0x01	; 1
    2cda:	b9 01       	movw	r22, r18
    2cdc:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodhi4>
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	80 93 82 01 	sts	0x0182, r24

			TCNT0 = 0;
    2ce6:	e2 e5       	ldi	r30, 0x52	; 82
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	10 82       	st	Z, r1
			g_sensor_start=0;
    2cec:	10 92 80 01 	sts	0x0180, r1
			g_timer_count=0;
    2cf0:	10 92 7f 01 	sts	0x017F, r1
    2cf4:	10 92 7e 01 	sts	0x017E, r1
			g_rising_edge=0;
    2cf8:	10 92 81 01 	sts	0x0181, r1
		}

	}

}
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <Ultrasonic_edgeProcessing>:

/*
 * Timer count until 550 (max distance 40cm)
 */
void Ultrasonic_edgeProcessing(void)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
	g_timer_count++;
    2d0a:	80 91 7e 01 	lds	r24, 0x017E
    2d0e:	90 91 7f 01 	lds	r25, 0x017F
    2d12:	01 96       	adiw	r24, 0x01	; 1
    2d14:	90 93 7f 01 	sts	0x017F, r25
    2d18:	80 93 7e 01 	sts	0x017E, r24

	if(g_timer_count > 550)
    2d1c:	80 91 7e 01 	lds	r24, 0x017E
    2d20:	90 91 7f 01 	lds	r25, 0x017F
    2d24:	22 e0       	ldi	r18, 0x02	; 2
    2d26:	87 32       	cpi	r24, 0x27	; 39
    2d28:	92 07       	cpc	r25, r18
    2d2a:	58 f0       	brcs	.+22     	; 0x2d42 <Ultrasonic_edgeProcessing+0x40>
	{
		TCNT0=0;
    2d2c:	e2 e5       	ldi	r30, 0x52	; 82
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	10 82       	st	Z, r1
		g_timer_count=0;
    2d32:	10 92 7f 01 	sts	0x017F, r1
    2d36:	10 92 7e 01 	sts	0x017E, r1
		g_sensor_start=0;
    2d3a:	10 92 80 01 	sts	0x0180, r1
		g_rising_edge=0;
    2d3e:	10 92 81 01 	sts	0x0181, r1
	}

}
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <main>:
#include "../MCAL/uart.h"
#include "../HAL/ultrasonic_timer0.h"
#include <util/delay.h>

void main(void)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	a7 97       	sbiw	r28, 0x27	; 39
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
	uint8 servo_angle=0 ;
    2d5c:	1d 8e       	std	Y+29, r1	; 0x1d

	UART_ConfigType UartConfig_Ptr={EIGHT_BIT,DISABLE_PARITY,ONE_STOP_BIT,BAUD9600};
    2d5e:	ce 01       	movw	r24, r28
    2d60:	4e 96       	adiw	r24, 0x1e	; 30
    2d62:	9c a3       	std	Y+36, r25	; 0x24
    2d64:	8b a3       	std	Y+35, r24	; 0x23
    2d66:	e0 e7       	ldi	r30, 0x70	; 112
    2d68:	f1 e0       	ldi	r31, 0x01	; 1
    2d6a:	fe a3       	std	Y+38, r31	; 0x26
    2d6c:	ed a3       	std	Y+37, r30	; 0x25
    2d6e:	f5 e0       	ldi	r31, 0x05	; 5
    2d70:	ff a3       	std	Y+39, r31	; 0x27
    2d72:	ed a1       	ldd	r30, Y+37	; 0x25
    2d74:	fe a1       	ldd	r31, Y+38	; 0x26
    2d76:	00 80       	ld	r0, Z
    2d78:	8d a1       	ldd	r24, Y+37	; 0x25
    2d7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d7c:	01 96       	adiw	r24, 0x01	; 1
    2d7e:	9e a3       	std	Y+38, r25	; 0x26
    2d80:	8d a3       	std	Y+37, r24	; 0x25
    2d82:	eb a1       	ldd	r30, Y+35	; 0x23
    2d84:	fc a1       	ldd	r31, Y+36	; 0x24
    2d86:	00 82       	st	Z, r0
    2d88:	8b a1       	ldd	r24, Y+35	; 0x23
    2d8a:	9c a1       	ldd	r25, Y+36	; 0x24
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	9c a3       	std	Y+36, r25	; 0x24
    2d90:	8b a3       	std	Y+35, r24	; 0x23
    2d92:	9f a1       	ldd	r25, Y+39	; 0x27
    2d94:	91 50       	subi	r25, 0x01	; 1
    2d96:	9f a3       	std	Y+39, r25	; 0x27
    2d98:	ef a1       	ldd	r30, Y+39	; 0x27
    2d9a:	ee 23       	and	r30, r30
    2d9c:	51 f7       	brne	.-44     	; 0x2d72 <main+0x2a>

	UART_init(&UartConfig_Ptr);
    2d9e:	ce 01       	movw	r24, r28
    2da0:	4e 96       	adiw	r24, 0x1e	; 30
    2da2:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <UART_init>

	ServoMotor_Init();
    2da6:	0e 94 1b 14 	call	0x2836	; 0x2836 <ServoMotor_Init>

	Ultrasonic_init();
    2daa:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <Ultrasonic_init>
		/*
		 * rotate the motor from angle 10 to 170
		 * send the angle by UART
		 * send the distance calculated by ULTRASONIC
		 */
		for(servo_angle=10 ;servo_angle<170;servo_angle++)
    2dae:	8a e0       	ldi	r24, 0x0A	; 10
    2db0:	8d 8f       	std	Y+29, r24	; 0x1d
    2db2:	83 c0       	rjmp	.+262    	; 0x2eba <main+0x172>
		{
			SERVO_set_angle(servo_angle);
    2db4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db6:	0e 94 57 14 	call	0x28ae	; 0x28ae <SERVO_set_angle>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	a0 ea       	ldi	r26, 0xA0	; 160
    2dc0:	b1 e4       	ldi	r27, 0x41	; 65
    2dc2:	89 8f       	std	Y+25, r24	; 0x19
    2dc4:	9a 8f       	std	Y+26, r25	; 0x1a
    2dc6:	ab 8f       	std	Y+27, r26	; 0x1b
    2dc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dca:	69 8d       	ldd	r22, Y+25	; 0x19
    2dcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4a ef       	ldi	r20, 0xFA	; 250
    2dd8:	54 e4       	ldi	r21, 0x44	; 68
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	8d 8b       	std	Y+21, r24	; 0x15
    2de4:	9e 8b       	std	Y+22, r25	; 0x16
    2de6:	af 8b       	std	Y+23, r26	; 0x17
    2de8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dea:	6d 89       	ldd	r22, Y+21	; 0x15
    2dec:	7e 89       	ldd	r23, Y+22	; 0x16
    2dee:	8f 89       	ldd	r24, Y+23	; 0x17
    2df0:	98 8d       	ldd	r25, Y+24	; 0x18
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e8       	ldi	r20, 0x80	; 128
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dfe:	88 23       	and	r24, r24
    2e00:	2c f4       	brge	.+10     	; 0x2e0c <main+0xc4>
		__ticks = 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9c 8b       	std	Y+20, r25	; 0x14
    2e08:	8b 8b       	std	Y+19, r24	; 0x13
    2e0a:	3f c0       	rjmp	.+126    	; 0x2e8a <main+0x142>
	else if (__tmp > 65535)
    2e0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e10:	8f 89       	ldd	r24, Y+23	; 0x17
    2e12:	98 8d       	ldd	r25, Y+24	; 0x18
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	3f ef       	ldi	r19, 0xFF	; 255
    2e18:	4f e7       	ldi	r20, 0x7F	; 127
    2e1a:	57 e4       	ldi	r21, 0x47	; 71
    2e1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	4c f5       	brge	.+82     	; 0x2e76 <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	69 8d       	ldd	r22, Y+25	; 0x19
    2e26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e2       	ldi	r20, 0x20	; 32
    2e32:	51 e4       	ldi	r21, 0x41	; 65
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9c 8b       	std	Y+20, r25	; 0x14
    2e4a:	8b 8b       	std	Y+19, r24	; 0x13
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <main+0x124>
    2e4e:	88 ec       	ldi	r24, 0xC8	; 200
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	9a 8b       	std	Y+18, r25	; 0x12
    2e54:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e56:	89 89       	ldd	r24, Y+17	; 0x11
    2e58:	9a 89       	ldd	r25, Y+18	; 0x12
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <main+0x112>
    2e5e:	9a 8b       	std	Y+18, r25	; 0x12
    2e60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	8b 89       	ldd	r24, Y+19	; 0x13
    2e64:	9c 89       	ldd	r25, Y+20	; 0x14
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	9c 8b       	std	Y+20, r25	; 0x14
    2e6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	69 f7       	brne	.-38     	; 0x2e4e <main+0x106>
    2e74:	14 c0       	rjmp	.+40     	; 0x2e9e <main+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e76:	6d 89       	ldd	r22, Y+21	; 0x15
    2e78:	7e 89       	ldd	r23, Y+22	; 0x16
    2e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9c 8b       	std	Y+20, r25	; 0x14
    2e88:	8b 8b       	std	Y+19, r24	; 0x13
    2e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8e:	98 8b       	std	Y+16, r25	; 0x10
    2e90:	8f 87       	std	Y+15, r24	; 0x0f
    2e92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e94:	98 89       	ldd	r25, Y+16	; 0x10
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <main+0x14e>
    2e9a:	98 8b       	std	Y+16, r25	; 0x10
    2e9c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);

			UART_sendDecimal(servo_angle);
    2e9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ea0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <UART_sendDecimal>

			UART_sendByte(',');
    2ea4:	8c e2       	ldi	r24, 0x2C	; 44
    2ea6:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <UART_sendByte>
			Ultrasonic_readDistance();
    2eaa:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Ultrasonic_readDistance>
			UART_sendByte(',');
    2eae:	8c e2       	ldi	r24, 0x2C	; 44
    2eb0:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <UART_sendByte>
		/*
		 * rotate the motor from angle 10 to 170
		 * send the angle by UART
		 * send the distance calculated by ULTRASONIC
		 */
		for(servo_angle=10 ;servo_angle<170;servo_angle++)
    2eb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eb6:	8f 5f       	subi	r24, 0xFF	; 255
    2eb8:	8d 8f       	std	Y+29, r24	; 0x1d
    2eba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ebc:	8a 3a       	cpi	r24, 0xAA	; 170
    2ebe:	08 f4       	brcc	.+2      	; 0x2ec2 <main+0x17a>
    2ec0:	79 cf       	rjmp	.-270    	; 0x2db4 <main+0x6c>
		/*
		 * return the motor from angle 170 to 10
		 * send the angle by UART
		 * send the distance calculated by ULTRASONIC
		 */
		for(servo_angle=170 ;servo_angle>10;servo_angle--)
    2ec2:	8a ea       	ldi	r24, 0xAA	; 170
    2ec4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec6:	83 c0       	rjmp	.+262    	; 0x2fce <main+0x286>
		{
			SERVO_set_angle(servo_angle);
    2ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eca:	0e 94 57 14 	call	0x28ae	; 0x28ae <SERVO_set_angle>
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ed4:	b1 e4       	ldi	r27, 0x41	; 65
    2ed6:	8b 87       	std	Y+11, r24	; 0x0b
    2ed8:	9c 87       	std	Y+12, r25	; 0x0c
    2eda:	ad 87       	std	Y+13, r26	; 0x0d
    2edc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	4a ef       	ldi	r20, 0xFA	; 250
    2eec:	54 e4       	ldi	r21, 0x44	; 68
    2eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	8f 83       	std	Y+7, r24	; 0x07
    2ef8:	98 87       	std	Y+8, r25	; 0x08
    2efa:	a9 87       	std	Y+9, r26	; 0x09
    2efc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2efe:	6f 81       	ldd	r22, Y+7	; 0x07
    2f00:	78 85       	ldd	r23, Y+8	; 0x08
    2f02:	89 85       	ldd	r24, Y+9	; 0x09
    2f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e8       	ldi	r20, 0x80	; 128
    2f0c:	5f e3       	ldi	r21, 0x3F	; 63
    2f0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f12:	88 23       	and	r24, r24
    2f14:	2c f4       	brge	.+10     	; 0x2f20 <main+0x1d8>
		__ticks = 1;
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	9e 83       	std	Y+6, r25	; 0x06
    2f1c:	8d 83       	std	Y+5, r24	; 0x05
    2f1e:	3f c0       	rjmp	.+126    	; 0x2f9e <main+0x256>
	else if (__tmp > 65535)
    2f20:	6f 81       	ldd	r22, Y+7	; 0x07
    2f22:	78 85       	ldd	r23, Y+8	; 0x08
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	3f ef       	ldi	r19, 0xFF	; 255
    2f2c:	4f e7       	ldi	r20, 0x7F	; 127
    2f2e:	57 e4       	ldi	r21, 0x47	; 71
    2f30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f34:	18 16       	cp	r1, r24
    2f36:	4c f5       	brge	.+82     	; 0x2f8a <main+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e2       	ldi	r20, 0x20	; 32
    2f46:	51 e4       	ldi	r21, 0x41	; 65
    2f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	bc 01       	movw	r22, r24
    2f52:	cd 01       	movw	r24, r26
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	9e 83       	std	Y+6, r25	; 0x06
    2f5e:	8d 83       	std	Y+5, r24	; 0x05
    2f60:	0f c0       	rjmp	.+30     	; 0x2f80 <main+0x238>
    2f62:	88 ec       	ldi	r24, 0xC8	; 200
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	9c 83       	std	Y+4, r25	; 0x04
    2f68:	8b 83       	std	Y+3, r24	; 0x03
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <main+0x226>
    2f72:	9c 83       	std	Y+4, r25	; 0x04
    2f74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	9e 83       	std	Y+6, r25	; 0x06
    2f7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f80:	8d 81       	ldd	r24, Y+5	; 0x05
    2f82:	9e 81       	ldd	r25, Y+6	; 0x06
    2f84:	00 97       	sbiw	r24, 0x00	; 0
    2f86:	69 f7       	brne	.-38     	; 0x2f62 <main+0x21a>
    2f88:	14 c0       	rjmp	.+40     	; 0x2fb2 <main+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8c:	78 85       	ldd	r23, Y+8	; 0x08
    2f8e:	89 85       	ldd	r24, Y+9	; 0x09
    2f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	9e 83       	std	Y+6, r25	; 0x06
    2f9c:	8d 83       	std	Y+5, r24	; 0x05
    2f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa2:	9a 83       	std	Y+2, r25	; 0x02
    2fa4:	89 83       	std	Y+1, r24	; 0x01
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <main+0x262>
    2fae:	9a 83       	std	Y+2, r25	; 0x02
    2fb0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);

			UART_sendDecimal(servo_angle);
    2fb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fb4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <UART_sendDecimal>

			UART_sendByte(',');
    2fb8:	8c e2       	ldi	r24, 0x2C	; 44
    2fba:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <UART_sendByte>
			Ultrasonic_readDistance();
    2fbe:	0e 94 31 16 	call	0x2c62	; 0x2c62 <Ultrasonic_readDistance>
			UART_sendByte(',');
    2fc2:	8c e2       	ldi	r24, 0x2C	; 44
    2fc4:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <UART_sendByte>
		/*
		 * return the motor from angle 170 to 10
		 * send the angle by UART
		 * send the distance calculated by ULTRASONIC
		 */
		for(servo_angle=170 ;servo_angle>10;servo_angle--)
    2fc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fca:	81 50       	subi	r24, 0x01	; 1
    2fcc:	8d 8f       	std	Y+29, r24	; 0x1d
    2fce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fd0:	8b 30       	cpi	r24, 0x0B	; 11
    2fd2:	08 f0       	brcs	.+2      	; 0x2fd6 <main+0x28e>
    2fd4:	79 cf       	rjmp	.-270    	; 0x2ec8 <main+0x180>
    2fd6:	eb ce       	rjmp	.-554    	; 0x2dae <main+0x66>

00002fd8 <__mulsi3>:
    2fd8:	62 9f       	mul	r22, r18
    2fda:	d0 01       	movw	r26, r0
    2fdc:	73 9f       	mul	r23, r19
    2fde:	f0 01       	movw	r30, r0
    2fe0:	82 9f       	mul	r24, r18
    2fe2:	e0 0d       	add	r30, r0
    2fe4:	f1 1d       	adc	r31, r1
    2fe6:	64 9f       	mul	r22, r20
    2fe8:	e0 0d       	add	r30, r0
    2fea:	f1 1d       	adc	r31, r1
    2fec:	92 9f       	mul	r25, r18
    2fee:	f0 0d       	add	r31, r0
    2ff0:	83 9f       	mul	r24, r19
    2ff2:	f0 0d       	add	r31, r0
    2ff4:	74 9f       	mul	r23, r20
    2ff6:	f0 0d       	add	r31, r0
    2ff8:	65 9f       	mul	r22, r21
    2ffa:	f0 0d       	add	r31, r0
    2ffc:	99 27       	eor	r25, r25
    2ffe:	72 9f       	mul	r23, r18
    3000:	b0 0d       	add	r27, r0
    3002:	e1 1d       	adc	r30, r1
    3004:	f9 1f       	adc	r31, r25
    3006:	63 9f       	mul	r22, r19
    3008:	b0 0d       	add	r27, r0
    300a:	e1 1d       	adc	r30, r1
    300c:	f9 1f       	adc	r31, r25
    300e:	bd 01       	movw	r22, r26
    3010:	cf 01       	movw	r24, r30
    3012:	11 24       	eor	r1, r1
    3014:	08 95       	ret

00003016 <__udivmodqi4>:
    3016:	99 1b       	sub	r25, r25
    3018:	79 e0       	ldi	r23, 0x09	; 9
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <__udivmodqi4_ep>

0000301c <__udivmodqi4_loop>:
    301c:	99 1f       	adc	r25, r25
    301e:	96 17       	cp	r25, r22
    3020:	08 f0       	brcs	.+2      	; 0x3024 <__udivmodqi4_ep>
    3022:	96 1b       	sub	r25, r22

00003024 <__udivmodqi4_ep>:
    3024:	88 1f       	adc	r24, r24
    3026:	7a 95       	dec	r23
    3028:	c9 f7       	brne	.-14     	; 0x301c <__udivmodqi4_loop>
    302a:	80 95       	com	r24
    302c:	08 95       	ret

0000302e <__udivmodhi4>:
    302e:	aa 1b       	sub	r26, r26
    3030:	bb 1b       	sub	r27, r27
    3032:	51 e1       	ldi	r21, 0x11	; 17
    3034:	07 c0       	rjmp	.+14     	; 0x3044 <__udivmodhi4_ep>

00003036 <__udivmodhi4_loop>:
    3036:	aa 1f       	adc	r26, r26
    3038:	bb 1f       	adc	r27, r27
    303a:	a6 17       	cp	r26, r22
    303c:	b7 07       	cpc	r27, r23
    303e:	10 f0       	brcs	.+4      	; 0x3044 <__udivmodhi4_ep>
    3040:	a6 1b       	sub	r26, r22
    3042:	b7 0b       	sbc	r27, r23

00003044 <__udivmodhi4_ep>:
    3044:	88 1f       	adc	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	5a 95       	dec	r21
    304a:	a9 f7       	brne	.-22     	; 0x3036 <__udivmodhi4_loop>
    304c:	80 95       	com	r24
    304e:	90 95       	com	r25
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	08 95       	ret

00003056 <__udivmodsi4>:
    3056:	a1 e2       	ldi	r26, 0x21	; 33
    3058:	1a 2e       	mov	r1, r26
    305a:	aa 1b       	sub	r26, r26
    305c:	bb 1b       	sub	r27, r27
    305e:	fd 01       	movw	r30, r26
    3060:	0d c0       	rjmp	.+26     	; 0x307c <__udivmodsi4_ep>

00003062 <__udivmodsi4_loop>:
    3062:	aa 1f       	adc	r26, r26
    3064:	bb 1f       	adc	r27, r27
    3066:	ee 1f       	adc	r30, r30
    3068:	ff 1f       	adc	r31, r31
    306a:	a2 17       	cp	r26, r18
    306c:	b3 07       	cpc	r27, r19
    306e:	e4 07       	cpc	r30, r20
    3070:	f5 07       	cpc	r31, r21
    3072:	20 f0       	brcs	.+8      	; 0x307c <__udivmodsi4_ep>
    3074:	a2 1b       	sub	r26, r18
    3076:	b3 0b       	sbc	r27, r19
    3078:	e4 0b       	sbc	r30, r20
    307a:	f5 0b       	sbc	r31, r21

0000307c <__udivmodsi4_ep>:
    307c:	66 1f       	adc	r22, r22
    307e:	77 1f       	adc	r23, r23
    3080:	88 1f       	adc	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	1a 94       	dec	r1
    3086:	69 f7       	brne	.-38     	; 0x3062 <__udivmodsi4_loop>
    3088:	60 95       	com	r22
    308a:	70 95       	com	r23
    308c:	80 95       	com	r24
    308e:	90 95       	com	r25
    3090:	9b 01       	movw	r18, r22
    3092:	ac 01       	movw	r20, r24
    3094:	bd 01       	movw	r22, r26
    3096:	cf 01       	movw	r24, r30
    3098:	08 95       	ret

0000309a <__divmodsi4>:
    309a:	97 fb       	bst	r25, 7
    309c:	09 2e       	mov	r0, r25
    309e:	05 26       	eor	r0, r21
    30a0:	0e d0       	rcall	.+28     	; 0x30be <__divmodsi4_neg1>
    30a2:	57 fd       	sbrc	r21, 7
    30a4:	04 d0       	rcall	.+8      	; 0x30ae <__divmodsi4_neg2>
    30a6:	d7 df       	rcall	.-82     	; 0x3056 <__udivmodsi4>
    30a8:	0a d0       	rcall	.+20     	; 0x30be <__divmodsi4_neg1>
    30aa:	00 1c       	adc	r0, r0
    30ac:	38 f4       	brcc	.+14     	; 0x30bc <__divmodsi4_exit>

000030ae <__divmodsi4_neg2>:
    30ae:	50 95       	com	r21
    30b0:	40 95       	com	r20
    30b2:	30 95       	com	r19
    30b4:	21 95       	neg	r18
    30b6:	3f 4f       	sbci	r19, 0xFF	; 255
    30b8:	4f 4f       	sbci	r20, 0xFF	; 255
    30ba:	5f 4f       	sbci	r21, 0xFF	; 255

000030bc <__divmodsi4_exit>:
    30bc:	08 95       	ret

000030be <__divmodsi4_neg1>:
    30be:	f6 f7       	brtc	.-4      	; 0x30bc <__divmodsi4_exit>
    30c0:	90 95       	com	r25
    30c2:	80 95       	com	r24
    30c4:	70 95       	com	r23
    30c6:	61 95       	neg	r22
    30c8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ca:	8f 4f       	sbci	r24, 0xFF	; 255
    30cc:	9f 4f       	sbci	r25, 0xFF	; 255
    30ce:	08 95       	ret

000030d0 <__prologue_saves__>:
    30d0:	2f 92       	push	r2
    30d2:	3f 92       	push	r3
    30d4:	4f 92       	push	r4
    30d6:	5f 92       	push	r5
    30d8:	6f 92       	push	r6
    30da:	7f 92       	push	r7
    30dc:	8f 92       	push	r8
    30de:	9f 92       	push	r9
    30e0:	af 92       	push	r10
    30e2:	bf 92       	push	r11
    30e4:	cf 92       	push	r12
    30e6:	df 92       	push	r13
    30e8:	ef 92       	push	r14
    30ea:	ff 92       	push	r15
    30ec:	0f 93       	push	r16
    30ee:	1f 93       	push	r17
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	ca 1b       	sub	r28, r26
    30fa:	db 0b       	sbc	r29, r27
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	09 94       	ijmp

00003108 <__epilogue_restores__>:
    3108:	2a 88       	ldd	r2, Y+18	; 0x12
    310a:	39 88       	ldd	r3, Y+17	; 0x11
    310c:	48 88       	ldd	r4, Y+16	; 0x10
    310e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3110:	6e 84       	ldd	r6, Y+14	; 0x0e
    3112:	7d 84       	ldd	r7, Y+13	; 0x0d
    3114:	8c 84       	ldd	r8, Y+12	; 0x0c
    3116:	9b 84       	ldd	r9, Y+11	; 0x0b
    3118:	aa 84       	ldd	r10, Y+10	; 0x0a
    311a:	b9 84       	ldd	r11, Y+9	; 0x09
    311c:	c8 84       	ldd	r12, Y+8	; 0x08
    311e:	df 80       	ldd	r13, Y+7	; 0x07
    3120:	ee 80       	ldd	r14, Y+6	; 0x06
    3122:	fd 80       	ldd	r15, Y+5	; 0x05
    3124:	0c 81       	ldd	r16, Y+4	; 0x04
    3126:	1b 81       	ldd	r17, Y+3	; 0x03
    3128:	aa 81       	ldd	r26, Y+2	; 0x02
    312a:	b9 81       	ldd	r27, Y+1	; 0x01
    312c:	ce 0f       	add	r28, r30
    312e:	d1 1d       	adc	r29, r1
    3130:	0f b6       	in	r0, 0x3f	; 63
    3132:	f8 94       	cli
    3134:	de bf       	out	0x3e, r29	; 62
    3136:	0f be       	out	0x3f, r0	; 63
    3138:	cd bf       	out	0x3d, r28	; 61
    313a:	ed 01       	movw	r28, r26
    313c:	08 95       	ret

0000313e <itoa>:
    313e:	fb 01       	movw	r30, r22
    3140:	9f 01       	movw	r18, r30
    3142:	e8 94       	clt
    3144:	42 30       	cpi	r20, 0x02	; 2
    3146:	c4 f0       	brlt	.+48     	; 0x3178 <itoa+0x3a>
    3148:	45 32       	cpi	r20, 0x25	; 37
    314a:	b4 f4       	brge	.+44     	; 0x3178 <itoa+0x3a>
    314c:	4a 30       	cpi	r20, 0x0A	; 10
    314e:	29 f4       	brne	.+10     	; 0x315a <itoa+0x1c>
    3150:	97 fb       	bst	r25, 7
    3152:	1e f4       	brtc	.+6      	; 0x315a <itoa+0x1c>
    3154:	90 95       	com	r25
    3156:	81 95       	neg	r24
    3158:	9f 4f       	sbci	r25, 0xFF	; 255
    315a:	64 2f       	mov	r22, r20
    315c:	77 27       	eor	r23, r23
    315e:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodhi4>
    3162:	80 5d       	subi	r24, 0xD0	; 208
    3164:	8a 33       	cpi	r24, 0x3A	; 58
    3166:	0c f0       	brlt	.+2      	; 0x316a <itoa+0x2c>
    3168:	89 5d       	subi	r24, 0xD9	; 217
    316a:	81 93       	st	Z+, r24
    316c:	cb 01       	movw	r24, r22
    316e:	00 97       	sbiw	r24, 0x00	; 0
    3170:	a1 f7       	brne	.-24     	; 0x315a <itoa+0x1c>
    3172:	16 f4       	brtc	.+4      	; 0x3178 <itoa+0x3a>
    3174:	5d e2       	ldi	r21, 0x2D	; 45
    3176:	51 93       	st	Z+, r21
    3178:	10 82       	st	Z, r1
    317a:	c9 01       	movw	r24, r18
    317c:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <strrev>

00003180 <strrev>:
    3180:	dc 01       	movw	r26, r24
    3182:	fc 01       	movw	r30, r24
    3184:	67 2f       	mov	r22, r23
    3186:	71 91       	ld	r23, Z+
    3188:	77 23       	and	r23, r23
    318a:	e1 f7       	brne	.-8      	; 0x3184 <strrev+0x4>
    318c:	32 97       	sbiw	r30, 0x02	; 2
    318e:	04 c0       	rjmp	.+8      	; 0x3198 <strrev+0x18>
    3190:	7c 91       	ld	r23, X
    3192:	6d 93       	st	X+, r22
    3194:	70 83       	st	Z, r23
    3196:	62 91       	ld	r22, -Z
    3198:	ae 17       	cp	r26, r30
    319a:	bf 07       	cpc	r27, r31
    319c:	c8 f3       	brcs	.-14     	; 0x3190 <strrev+0x10>
    319e:	08 95       	ret

000031a0 <_exit>:
    31a0:	f8 94       	cli

000031a2 <__stop_program>:
    31a2:	ff cf       	rjmp	.-2      	; 0x31a2 <__stop_program>
